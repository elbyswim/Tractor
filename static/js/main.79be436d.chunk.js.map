{"version":3,"sources":["tractor_logo.svg","utils/Cards.js","socket/connect.js","redux/selectors.js","redux/actions.js","components/Game.js","components/ConnectedClients.js","components/DisplayTrump.js","components/RegularButton.js","components/GameButton.js","utils/Unicodes.js","components/ButtonsContainer.js","components/PlayerInfo.js","App.js","serviceWorker.ts","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","Cards","path","suits","jokers","cards","suitOrder","valueOrder","this","Set","arr","has","valid_card","valid_suit","isValidCard","console","log","card","trump","newCard","trumpValue","trumpSuit","cardObject","isSelected","svg","getSvg","length","i","splice","push","diamonds","clubs","spades","hearts","trumpD","trumpS","trumpH","trumpC","sortedCards","forEach","cardObj","cardVal","concat","trumpTracker","validBids","currentBid","bid","_","isEqual","socket","connectToSocketIO","getStatusCb","validator","name","room","io","setStatusCb","on","status","id","getConnectionStatus","emit","setSocketIdIO","getScreenSize","store","appWidth","appHeight","getExistingClients","clients","getExistingClientIds","clientIds","updateState","numStateUpdated","getName","getId","getMyCards","getValidBids","getCurrentBid","getTrumpValue","getTrumpTracker","getNumCardsSelected","numCardsSelected","getExistingTricks","existingTricks","getClientTurn","currentClientTurn","updateCardsInHand","type","payload","setCurrentBid","socketId","toggleCardSelector","canSelectCards","updateNumCardsSelected","num","toggleBidButtons","canBid","setPoints","points","PlayingCards","Game","props","state","cardWidth","cardHeight","cardSelectedHeight","cardHoveredHeight","numCardsForBottom","setStage1Listeners","setCardSize","setTrumpValueCb","setCardsCb","setNewBidCb","setBottomCardsCb","getFinalBidCb","getPointsCb","setTrumpValue","bind","setCards","updateBidStatus","receiveBottomCards","sortHand","getPoints","pointsFromNonBottom","setState","setValidBids","insertCard","newTrump","bottomCards","bottomCard","cardIndex","window","alert","toggleSingleCard","myId","map","receiveBid","numCards","Container","height","CardContainer","getExistingTrickSvg","MyCardImgContainer","zIndex","MyCardImg","draggable","width","src","key","CardImgContainer","onClick","toggleCards","CardImg","Component","styled","div","prop","img","span","Math","abs","connect","connectedClients","getCanSelectCards","changeState","ClientsContainer","ul","ClientsHeader","ClientItem","li","roomName","getRoom","clientTurn","numStateChanges","useEffect","document","title","outputString","renderClientStatus","DisplayTrump","bidHistory","updateComponent","prevProps","currentBottomClient","prevBottomClient","prevBid","JSON","stringify","setTimeout","shift","Card","allSvgs","SvgContainer","bidArr","getTrumpCardSvgs","getBottomClient","Button","button","GameFunction","onClickCb","label","RegularButton","Icon","color","BidButton","dangerouslySetInnerHTML","__html","icon","Unicodes","H","S","C","D","SJ","BJ","AllButtonsContainer","BidButtonContainer","canBidForBottom","getCanBidForBottom","clientTurnId","numUpdateStates","setClientTurn","clientId","setTricksPlayed","tricks","setBottom","makeBidIO","updateBid","setDoneBid","getClientTurnCb","getTricksPlayedCb","getGeneratedTrumpCb","enableTurnsListener","enableTricksListener","enableTrumpListener","trumpCard","tricksPlayed","emitReturnBottom","bottom","cardsInHand","emitTrickValidator","isValidPlay","newCards","emitTrick","selectedCards","trick","makePlayIO","bidArray","buttonObject","rawData","Object","assign","renderData","getAvailableBidButtons","GameButton","Name","Container1","Container2","Container3","PlayerSignal","updateNumState","filteredClientIds","myIndex","indexOf","renderPlayerInfo","index","clientName","clientCards","cardSvg","player1","player2","player3","App","connectionStatus","iconWidth","inputWidth","addEventListener","setAppSizes","screenWidth","innerWidth","screenHeight","innerHeight","setScreenSize","setClientsCb","setConnectedClients","setUser","sockets","updateClientList","isConnected","ev","preventDefault","nameRef","value","roomRef","slice","setConnectionStatus","joinRoomValidator","Title","Logo","TractorSvg","Form","onSubmit","Input","autoFocus","placeholder","ref","ButtonsContainer","renderPostConnection","renderPreConnection","h1","form","input","keys","Boolean","location","hostname","match","currState","connected","cardsPlayed","createStore","action","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79be436d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tractor_logo.e6e625d4.svg\";","import _ from 'underscore';\r\n\r\nexport default class Cards {\r\n  // TODO: DEPLOYMENT CARDS PATH IS DIFFERENT\r\n  // path = 'https://jli0423.github.io/Tractor/cardsSVG/'; // local\r\n  path = '/Tractor/cardsSVG/'; //deployment\r\n  suits = [];\r\n  jokers = [];\r\n  cards = [];\r\n  // want a black, red, black, red order\r\n  suitOrder = { 'S': 0, 'D': 1, 'C': 2, 'H': 3 };\r\n  // order already works for NT and spades trump\r\n  valueOrder = {\r\n    'A': 0,\r\n    'K': 1,\r\n    'Q': 2,\r\n    'J': 3,\r\n    '10': 4,\r\n    '9': 5,\r\n    '8': 6,\r\n    '7': 7,\r\n    '6': 8,\r\n    '5': 9,\r\n    '4': 10,\r\n    '3': 11,\r\n    '2': 12\r\n  }\r\n\r\n  constructor(path) {\r\n    // this.path = path;\r\n    this.suits = new Set(['H', 'C', 'S', 'D']); //hearts, clubs, spades, diamonds\r\n    this.jokers = new Set(['S', 'B']); // Small, big\r\n    this.cards = new Set(['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']);\r\n  }\r\n\r\n  isValidCard(arr) {\r\n    if (arr[1] === 'J') {\r\n      // if it is a joker,\r\n      return this.jokers.has(arr[0]);\r\n    }\r\n\r\n    let valid_card = this.cards.has(arr[0]);\r\n    let valid_suit = this.suits.has(arr[1]);\r\n\r\n    return valid_card && valid_suit;\r\n  }\r\n\r\n  getSvg(arr) {\r\n    if (!this.isValidCard(arr)) {\r\n      console.log(`Invalid card: ${arr}`);\r\n    }\r\n    return `${this.path}${arr[0]}${arr[1]}.svg`;\r\n  }\r\n\r\n  isTrump(card) {\r\n    return card[0] === this.trump;\r\n  }\r\n\r\n  insertCard(cards, newCard, trumpValue, trumpSuit) {\r\n    const cardObject = {\r\n      card: newCard,\r\n      isSelected: false,\r\n      svg: this.getSvg(newCard)\r\n    }\r\n    if (trumpSuit) {\r\n      // diamonds are trump -> want diamonds first -> move spades to back\r\n      if (trumpSuit === 'D') {\r\n        this.suitOrder['S'] = 4;\r\n        // clubs are trump -> switch clubs and spades\r\n      } else if (trumpSuit === 'C') {\r\n        this.suitOrder['C'] = 0;\r\n        this.suitOrder['S'] = 2;\r\n        // hearts are trump -> move hearts to front\r\n      } else if (trumpSuit === 'H') {\r\n        this.suitOrder['H'] = -1;\r\n      }\r\n    }\r\n    if (cards.length > 0) {\r\n      let i = 0;\r\n      // card is a joker\r\n      if (newCard[0] === 'S' || newCard[1] === 'J') {\r\n        while (i < cards.length && cards[i].card[0] === 'B' && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // card value is trump\r\n      } else if (newCard[0] === trumpValue) {\r\n        // Jokers come first\r\n        while (i < cards.length && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // insert based on order\r\n        while (i < cards.length && cards[i].card[0] === trumpValue && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        // card is neither a joker nor a \"trump value trump\"\r\n      } else {\r\n        while (i < cards.length && (cards[i].card[1] === 'J' || cards[i].card[0] === trumpValue)) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] === this.suitOrder[newCard[1]] && this.valueOrder[cards[i].card[0]] < this.valueOrder[newCard[0]]) {\r\n          i++;\r\n        }\r\n      }\r\n      cards.splice(i, 0, cardObject);\r\n    } else {\r\n      cards.push(cardObject);\r\n    }\r\n  }\r\n  \r\n  // This is for after receiving trump\r\n  // direction:\r\n    // 1: increasing (3....A)\r\n    // 0: decreasing (A....3)\r\n  sortHand(cards, trumpValue, trumpSuit, direction = 0) {\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let hearts = [];\r\n    let jokers = [];\r\n    let trumpD = [];\r\n    let trumpS = [];\r\n    let trumpH = [];\r\n    let trumpC = [];\r\n\r\n    let sortedCards = [];\r\n\r\n    if (trumpSuit === 'S' || trumpSuit === 'J') {\r\n      // if direction changed, sort otherway\r\n      // otherwise nothing to do for no trump or spades\r\n      return cards;\r\n    }\r\n\r\n    // only get here if there is a trump suit change\r\n    cards.forEach((cardObj) => {\r\n      let cardVal = cardObj.card;\r\n      if (cardVal[1] === 'J') {\r\n        jokers.push(cardObj);\r\n      }\r\n      if (cardVal[0] === trumpValue) {\r\n        if (cardVal[1] === 'S') {\r\n          trumpS.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          trumpC.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          trumpH.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          trumpD.push(cardObj);\r\n        }\r\n      }\r\n      else {\r\n        if (cardVal[1] === 'S') {\r\n          spades.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          clubs.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          hearts.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          diamonds.push(cardObj);\r\n        }\r\n      }\r\n    });\r\n\r\n    sortedCards = sortedCards.concat(jokers);\r\n    if (trumpSuit === 'C') {\r\n      sortedCards = sortedCards.concat(trumpC, trumpH, trumpS, trumpD, clubs, hearts, spades, diamonds);\r\n    }\r\n    if (trumpSuit === 'H') {\r\n      sortedCards = sortedCards.concat(trumpH, trumpS, trumpD, trumpC, hearts, spades, diamonds, clubs);\r\n    }\r\n    if (trumpSuit === 'D') {\r\n      sortedCards = sortedCards.concat(trumpD, trumpC, trumpH, trumpS, diamonds, clubs, hearts, spades);\r\n    }\r\n    console.log('sortedCards', sortedCards);\r\n    return sortedCards;\r\n  }\r\n\r\n  // TODO\r\n  newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue) {\r\n    if (newCard[1] === 'J') {\r\n      trumpTracker[newCard[0] + 'J'] += 1\r\n      if (trumpTracker[newCard[0] + 'J'] === 2) {\r\n        if (!currentBid || currentBid[1] !== 'J' || (currentBid[0] === 'S' && newCard[0] === 'B')) {\r\n          validBids.push(newCard)\r\n        }\r\n      }\r\n    } else if (newCard[0] === trumpValue) {\r\n      console.log(trumpTracker);\r\n      trumpTracker[newCard[1]] += 1;\r\n      if (!currentBid || (currentBid[0] === 1 && trumpTracker[newCard[1]] === 2)) {\r\n        validBids.push([trumpTracker[newCard[1]], newCard[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  updateBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    if (bid[0] === 1) {\r\n      if (trumpTracker[bid[1]] === 2) {\r\n        validBids.push([2, bid[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  receiveBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    \r\n    if (_.isEqual(bid, ['B', 'J'])) {\r\n      return;\r\n    } \r\n    \r\n    if (trumpTracker['BJ'] === 2) {\r\n      validBids.push(['B', 'J'])\r\n    }\r\n\r\n    if (_.isEqual(bid, ['S', 'J'])) {\r\n      return;\r\n    }\r\n\r\n    if (trumpTracker['SJ'] === 2) {\r\n      validBids.push(['S', 'J'])\r\n    }\r\n\r\n    if (bid[0] === 2) {\r\n      return;\r\n    } \r\n\r\n    if (trumpTracker['S'] === 2) {\r\n      validBids.push([2, 'S'])\r\n    }\r\n    \r\n    if (trumpTracker['D'] === 2) {\r\n      validBids.push([2, 'D'])\r\n    }\r\n    \r\n    if (trumpTracker['C'] === 2) {\r\n      validBids.push([2, 'C'])\r\n    }\r\n    \r\n    if (trumpTracker['H'] === 2) {\r\n      validBids.push([2, 'H'])\r\n    }\r\n  }\r\n};\r\n","import io from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:8000\";\r\n\r\nvar socket = null;\r\n\r\nexport function connectToSocketIO(getStatusCb, validator, name, room) {\r\n  // socket = io(ENDPOINT);\r\n  // if (!socket.connected) {\r\n    socket = io('tractorserver.herokuapp.com');\r\n  // }\r\n  getConnectionStatus(getStatusCb, name, room);\r\n  setSocketIdIO(name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT EMITTERS ------------------\r\nexport function makePlayIO(trick, cardsInHand, validator) {\r\n  socket.emit('clientPlay', trick, cardsInHand, validator); \r\n}\r\n\r\nexport function makeBidIO(bid) {\r\n  socket.emit('newBid', bid);\r\n}\r\n\r\nexport function setDoneBidIO() {\r\n  socket.emit('doneBid');\r\n}\r\n\r\n// returning the 8 cards you don't want\r\nexport function returnBottomIO(bottom) {\r\n  console.log(socket.id, 'returning bottom', bottom);\r\n  socket.emit('newBottom', bottom);\r\n}\r\n\r\nfunction setSocketIdIO(name, room, validator) {\r\n  console.log(validator)\r\n  socket.emit('setSocketId', name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT LISTENERS ------------------\r\nexport function getPointsIO(getPointsCb) {\r\n  socket.on('opponentPoints', (pointsFromNonBottom) => getPointsCb(pointsFromNonBottom));\r\n}\r\n\r\nexport function getGeneratedTrumpIO(getGeneratedTrumpCb) {\r\n  socket.on('generateTrump', (clientId, card) => getGeneratedTrumpCb(clientId, card));\r\n}\r\n\r\nexport function getFinalBidIO (getFinalBidCb) {\r\n  socket.on('bidWon', getFinalBidCb);\r\n}\r\n\r\nexport function getClientTurnIO(getClientTurnCb) {\r\n  socket.on('nextClient', (clientId) => {\r\n    getClientTurnCb(clientId);\r\n  });\r\n}\r\n\r\nexport function getTricksPlayedIO(getTricksPlayedCb) {\r\n  socket.on('cardsPlayed', (tricks) => {\r\n    console.log('Received current tricks', tricks);\r\n    getTricksPlayedCb(tricks);\r\n  });\r\n}\r\n\r\nexport function getBottomIO(setBottomCardsCb) {\r\n  socket.on('originalBottom', (cards) => setBottomCardsCb(cards));\r\n}\r\n\r\nexport function getConnectedClientsIO(setClientsCb) {\r\n  socket.on('newClientConnection', setClientsCb);\r\n}\r\n\r\nexport function getCardsIO(setCardsCb) {\r\n  socket.on('dealCard', setCardsCb);\r\n}\r\n\r\nexport function getNewBidIO(setNewBidCb) {\r\n  socket.on('setNewBid', (socketId, bid) => setNewBidCb(socketId, bid));\r\n}\r\n\r\nexport function getTrumpValueIO(setTrumpValueCb) {\r\n  socket.on('setTrumpValue', trump => setTrumpValueCb(trump));\r\n}\r\n\r\nfunction getConnectionStatus(setStatusCb, name, room) {\r\n  socket.on('connectionStatus', status => {\r\n    console.log('connected');\r\n    setStatusCb(status, socket.id, name, room);\r\n  });\r\n}\r\n","export const getScreenSize = store => ({\r\n  appWidth: store.appWidth,\r\n  appHeight: store.appHeight\r\n});\r\n\r\nexport const getRoom = store => store.room;\r\n\r\nexport const getExistingClients = store => store.clients;\r\n\r\nexport const getExistingClientIds = store => store.clientIds;\r\n\r\nexport const updateState = store => store.numStateUpdated;\r\n\r\nexport const getName = store => store.name;\r\n\r\nexport const getId = store => store.id;\r\n\r\nexport const getBottomClient = store => store.currentBottomClient;\r\n\r\nexport const getMyCards = store => store.cards;\r\n\r\nexport const getValidBids = store => store.validBids;\r\n\r\nexport const getCurrentBid = store => store.currentBid;\r\n\r\nexport const getTrumpValue = store => store.trump;\r\n\r\nexport const getTrumpTracker = store => store.trumpTracker;\r\n\r\nexport const getCanSelectCards = store => store.canSelectCards;\r\n\r\nexport const getNumCardsSelected = store => store.numCardsSelected;\r\n\r\nexport const getCanBidForBottom = store => store.canBidForBottom;\r\n\r\nexport const getExistingTricks = store => store.existingTricks;\r\n\r\nexport const getClientTurn = store => store.currentClientTurn;\r\n\r\nexport const getPoints = store => store.points;\r\n","export const setScreenSize = (width, height) => ({\r\n  type: 'SET_SCREEN_SIZE',\r\n  payload: {\r\n    width,\r\n    height\r\n  }\r\n})\r\n\r\nexport const updateClientList = (clients) => ({\r\n  type: 'UPDATE_CLIENT_LIST',\r\n  payload: {\r\n    clients,\r\n    clientIds: Object.keys(clients)\r\n  }\r\n});\r\n\r\nexport const setUser = (name, id, room) => ({\r\n  type: 'SET_USER',\r\n  payload: {\r\n    name,\r\n    id,\r\n    room,\r\n  }\r\n});\r\n\r\nexport const setBottomClient = (socketId) => ({\r\n  type: 'SET_DECLARER',\r\n  payload: socketId\r\n})\r\n\r\nexport const updateCardsInHand = (cards, trumpTracker) => ({\r\n  type: 'UPDATE_MY_HAND',\r\n  payload: {\r\n    trumpTracker,\r\n    cards\r\n  }\r\n})\r\n\r\nexport const setValidBids = (validBids) => ({\r\n  type: 'SET_VALID_BIDS',\r\n  payload: validBids\r\n})\r\n\r\nexport const setCurrentBid = (socketId, bid) => ({\r\n  type: 'SET_CURRENT_BID',\r\n  payload: {\r\n    socketId,\r\n    bid\r\n  }\r\n})\r\n\r\nexport const setTrumpValue = (trump) => ({\r\n  type: 'SET_TRUMP_VALUE',\r\n  payload: trump\r\n})\r\n\r\nexport const toggleCardSelector = (canSelectCards) => ({\r\n  type: 'CAN_SELECT_CARDS',\r\n  payload: canSelectCards\r\n})\r\n\r\nexport const updateNumCardsSelected = (num) => ({\r\n  type: 'UPDATE_NUM_CARDS_SELECTED',\r\n  payload: num\r\n})\r\n\r\nexport const toggleBidButtons = (canBid) => ({\r\n  type: 'TOGGLE_BID_BUTTONS',\r\n  payload: canBid\r\n})\r\n\r\nexport const setClientTurn = (clientId) => ({\r\n  type: 'SET_CLIENT_TURN',\r\n  payload: clientId\r\n})\r\n\r\nexport const setTricksPlayed = (tricks) => ({\r\n  type: 'SET_ALL_TRICKS',\r\n  payload: tricks\r\n})\r\n\r\nexport const setPoints = (points) => ({\r\n  type: 'SET_POINTS',\r\n  payload: points\r\n})","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport PlayingCards from '../utils/Cards';\r\nimport {\r\n  getCardsIO,\r\n  getNewBidIO,\r\n  getTrumpValueIO,\r\n  getPointsIO,\r\n  getFinalBidIO,\r\n  getBottomIO\r\n} from \"../socket/connect\";\r\n\r\nimport {\r\n  getId,\r\n  getMyCards,\r\n  updateState,\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getTrumpTracker,\r\n  getCanSelectCards,\r\n  getNumCardsSelected,\r\n  getExistingTricks,\r\n  getScreenSize,\r\n  getValidBids\r\n} from '../redux/selectors';\r\n\r\nimport {\r\n  updateCardsInHand,\r\n  setCurrentBid,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  setPoints,\r\n  toggleBidButtons,\r\n  setValidBids\r\n} from '../redux/actions';\r\n\r\nconst Cards = new PlayingCards('/cardsSVG/');\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cardWidth: 120,\r\n      cardHeight: 168,\r\n      cardSelectedHeight: -30,\r\n      cardHoveredHeight: -50,\r\n      numCardsForBottom: 0\r\n    };\r\n  }\r\n  // all listeners required pre-game goes here\r\n  componentDidMount() {\r\n    this.setStage1Listeners();\r\n    this.setCardSize();\r\n  }\r\n\r\n  setStage1Listeners() {\r\n    getTrumpValueIO(this.props.setTrumpValue.bind(this));\r\n    getCardsIO(this.setCards.bind(this));\r\n    getNewBidIO(this.updateBidStatus.bind(this));\r\n    getBottomIO(this.receiveBottomCards.bind(this));\r\n    getFinalBidIO(this.sortHand.bind(this));\r\n    getPointsIO(this.getPoints.bind(this));\r\n    this.setCardSize();\r\n  }\r\n\r\n  sortHand() {\r\n    const {\r\n      cards,\r\n      currentBid,\r\n      trumpTracker,\r\n      trumpValue\r\n    } = this.props;\r\n    this.props.updateCardsInHand(Cards.sortHand(cards, trumpValue, currentBid[1]), trumpTracker);\r\n  }\r\n\r\n  getPoints(points) {\r\n    this.props.setPoints(points);\r\n  }\r\n\r\n  setCardSize() {\r\n    const {\r\n      appWidth\r\n    } = this.props;\r\n    let cardWidth, cardHeight, cardHoveredHeight, cardSelectedHeight;\r\n\r\n    if (appWidth === 2560) {\r\n      cardWidth = 204;\r\n      cardHeight = 286;\r\n      cardSelectedHeight = -70;\r\n      cardHoveredHeight = -90;\r\n    }\r\n    if (appWidth === 1920) {\r\n      cardWidth = 120;\r\n      cardHeight = 168;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n    if (appWidth === 1280) {\r\n      cardWidth = 110;\r\n      cardHeight = 148;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n\r\n    this.setState({\r\n      cardWidth,\r\n      cardHeight,\r\n      cardHoveredHeight,\r\n      cardSelectedHeight\r\n    });\r\n  }\r\n\r\n  setCards(newCard) {\r\n    if (!newCard || newCard.length !== 2) {\r\n      return;\r\n    }\r\n\r\n    let {\r\n      cards,\r\n      trumpValue,\r\n      trumpTracker,\r\n      validBids,\r\n      currentBid,\r\n      toggleBidButtons,\r\n      setValidBids,\r\n      updateCardsInHand\r\n    } = this.props;\r\n\r\n    Cards.insertCard(cards, newCard, trumpValue, currentBid);\r\n    Cards.newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue);\r\n    setValidBids(validBids);\r\n    updateCardsInHand(cards, trumpTracker);\r\n    toggleBidButtons(true);\r\n  }\r\n\r\n  receiveBottomCards(bottomCards) {\r\n    bottomCards.forEach(bottomCard => {\r\n      this.setCards(bottomCard);\r\n    });\r\n    this.props.toggleCardSelector(true);\r\n    this.props.toggleBidButtons(false);\r\n  }\r\n\r\n  toggleSingleCard(cardIndex) {\r\n    const {\r\n      cards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n\r\n    if (!isSelected) {\r\n      this.props.updateNumCardsSelected(numCardsSelected + 1);\r\n    } else {\r\n      this.props.updateNumCardsSelected(numCardsSelected - 1);\r\n    }\r\n    cards[cardIndex].isSelected = !isSelected;\r\n  }\r\n\r\n  toggleCards(cardIndex) {\r\n    const {\r\n      cards,\r\n      trumpTracker,\r\n      canSelectCards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n    console.log('canToggleCards', canSelectCards);\r\n\r\n    if (!canSelectCards) {\r\n      return;\r\n    }\r\n\r\n    // numBottom\r\n    if (cards.length > 25 && !isSelected && numCardsSelected === 8) {\r\n      window.alert('Maximum cards for bottom selected');\r\n      return;\r\n    }\r\n\r\n    this.toggleSingleCard(cardIndex);\r\n    this.props.updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  getExistingTrickSvg() {\r\n    const {\r\n      myId,\r\n      existingTricks\r\n    } = this.props;\r\n    if (!existingTricks || !existingTricks[myId]) {\r\n      return [];\r\n    }\r\n    \r\n    return existingTricks[myId].map((card) => Cards.getSvg(card));\r\n  }\r\n\r\n  updateBidStatus(socketId, bid) {\r\n    const {\r\n      trumpTracker,\r\n      validBids,\r\n    } = this.props;\r\n    Cards.receiveBid(bid, trumpTracker, validBids);\r\n    this.props.setCurrentBid(socketId, bid);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      cards,\r\n      numCards,\r\n    } = this.props;\r\n    const {\r\n      cardWidth,\r\n      cardHeight,\r\n      cardSelectedHeight,\r\n      cardHoveredHeight\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        height={cardHeight}\r\n      >\r\n        <CardContainer>\r\n          {this.getExistingTrickSvg().map((card, i) => {\r\n              return (\r\n                <MyCardImgContainer\r\n                  zIndex={i}\r\n                >\r\n                  <MyCardImg\r\n                    draggable={false}\r\n                    width={cardWidth}\r\n                    height={cardHeight}\r\n                    src={card}\r\n                    key={i}\r\n                  />\r\n                </MyCardImgContainer>\r\n              )\r\n            })\r\n          }\r\n        </CardContainer>\r\n        <CardContainer>\r\n          {cards.map((card, i) => {\r\n            return (\r\n              <CardImgContainer\r\n                height={cardHeight}\r\n                onClick={() => { this.toggleCards(i) }}\r\n                numCards={numCards}\r\n                cardWidth={cardWidth}\r\n                cardHoveredHeight={cardHoveredHeight}\r\n                zIndex={i}\r\n              >\r\n                <CardImg\r\n                  // TODO: enable drag and drop custom sorting later?\r\n                  draggable={false}\r\n                  width={cardWidth}\r\n                  height={cardHeight}\r\n                  isSelected={card.isSelected}\r\n                  cardSelectedHeight={cardSelectedHeight}\r\n                  src={card.svg}\r\n                  key={i}\r\n                />\r\n              </CardImgContainer>\r\n              // change the key prop to the name of card\r\n            )\r\n          })}\r\n        </CardContainer>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const myId = getId(state);\r\n  const cards = getMyCards(state);\r\n  const connectedClients = getExistingClients(state);\r\n  const existingTricks = getExistingTricks(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const trumpValue = getTrumpValue(state);\r\n  const trumpTracker = getTrumpTracker(state);\r\n  const validBids = getValidBids(state);\r\n  const canSelectCards = getCanSelectCards(state);\r\n  const numCardsSelected = getNumCardsSelected(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const numCards = cards.length;\r\n\r\n  const changeState = updateState(state);\r\n  return {\r\n    myId,\r\n    cards,\r\n    numCards,\r\n    connectedClients,\r\n    existingTricks,\r\n    appWidth,\r\n    appHeight,\r\n    canSelectCards,\r\n    numCardsSelected,\r\n    currentBid,\r\n    trumpValue,\r\n    trumpTracker,\r\n    validBids,\r\n    changeState,\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  bottom: 40px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* width: 1800px; */\r\n  /* height: ${prop => `${prop.height * 1.8}px`}; */\r\n`;\r\n\r\nconst CardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: ${prop => `${prop.width}px`};\r\n  height: ${prop => `${prop.height}px`};\r\n  transform: ${prop => prop.isSelected && `translateY(${prop.cardSelectedHeight}px);`};\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst MyCardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  \r\n  &:not(:first-child) {\r\n    margin-left: -30px;\r\n  }\r\n`;\r\n\r\nconst MyCardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: 50px;\r\n  height: 75px;\r\n`;\r\n\r\nconst CardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  height: ${prop => `${prop.height + Math.abs(prop.cardHoveredHeight)}px`};\r\n\r\n  &:not(:first-child) {\r\n    /* margin-left: ${prop => `-${prop.numCards * 2.3}px`}; */\r\n    margin-left: ${prop => `-${prop.cardWidth * 0.65}px`};\r\n  }\r\n\r\n  &:hover ${CardImg} {\r\n    z-index: 100;\r\n    transform: ${prop => `translateY(${prop.cardHoveredHeight}px);`}\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateCardsInHand,\r\n  setValidBids,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  setPoints,\r\n  toggleBidButtons,\r\n  setCurrentBid\r\n})(Game);\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getExistingClientIds,\r\n  getClientTurn,\r\n  getRoom,\r\n  getId,\r\n  getName,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nconst ConnectedClients = (props) => {\r\n  const {\r\n    myId,\r\n    name,\r\n    clientIds,\r\n    roomName,\r\n    clients,\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    document.title = name;\r\n  });\r\n\r\n  const renderClientStatus = (id) => {\r\n    const { clientTurn } = props;\r\n    let outputString = '';\r\n    if (clientTurn === id) {\r\n      outputString = 'Waiting for '\r\n    }\r\n    if (id === myId) {\r\n      outputString += `you`;\r\n    } else {\r\n      outputString += clients[id];\r\n    }\r\n    return outputString\r\n  }\r\n\r\n  // TODO: show player levels as well as level\r\n  return (\r\n    <ClientsContainer>\r\n      <ClientsHeader>PLAYERS ({roomName})</ClientsHeader>\r\n      {clientIds.map(id => {\r\n        return (\r\n          <ClientItem\r\n            key={id}\r\n          >\r\n          {renderClientStatus(id)}\r\n          </ClientItem>\r\n        );\r\n      })}\r\n    </ClientsContainer>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const myId = getId(state);\r\n  const name = getName(state);\r\n  const clients = getExistingClients(state);\r\n  const clientIds = getExistingClientIds(state);\r\n  const roomName = getRoom(state);\r\n  const clientTurn = getClientTurn(state);\r\n\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    myId,\r\n    name,\r\n    clients,\r\n    roomName,\r\n    clientTurn,\r\n    clientIds,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  transform: translateX(-25%);\r\n  top: 10px;\r\n  right: 0;\r\n  padding: 10px 30px 10px 10px;\r\n  width: 150px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\n\r\nexport default connect(mapStateToProps)(ConnectedClients);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getPoints,\r\n  getBottomClient,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nimport Cards from '../utils/Cards';\r\n\r\nclass DisplayTrump extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bidHistory: [],\r\n      updateComponent: 0\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      currentBid,\r\n      currentBottomClient\r\n    } = this.props;\r\n    const {\r\n      bidHistory,\r\n      updateComponent\r\n    } = this.state;\r\n    const prevBottomClient = prevProps.currentBottomClient;\r\n    const prevBid = prevProps.currentBid;\r\n\r\n    if (JSON.stringify(prevBid) === JSON.stringify(currentBid) &&\r\n      JSON.stringify(currentBottomClient) === JSON.stringify(prevBottomClient)) {\r\n      return;\r\n    }\r\n\r\n    if (currentBid.length === 0) {\r\n      this.setState({\r\n        bidHistory: []\r\n      });\r\n      return;\r\n    }\r\n\r\n    bidHistory.push([currentBottomClient, currentBid]);\r\n\r\n    this.setState({\r\n      bidHistory\r\n    });\r\n\r\n    if (prevBottomClient) {\r\n      setTimeout(() => {\r\n        bidHistory.shift();\r\n        this.setState({\r\n          bidHistory,\r\n          updateComponent: updateComponent + 1\r\n        })\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  getTrumpCardSvgs(currentBid) {\r\n    const { trumpValue } = this.props;\r\n    const Card = new Cards('/cardsSVG/');\r\n    const allSvgs = [];\r\n    let svg;\r\n\r\n    if (currentBid && currentBid.length) {\r\n      if (currentBid[1] === 'J') {\r\n        svg = Card.getSvg(currentBid);\r\n        for (let i = 0; i < 2; i++) {\r\n          allSvgs.push(<SvgContainer src={svg} />);\r\n        }\r\n      } else {\r\n        svg = Card.getSvg([trumpValue, currentBid[1]]);\r\n        for (let i = 0; i < currentBid[0]; i++) {\r\n          allSvgs.push(<SvgContainer src={svg} />);\r\n        }\r\n      }\r\n    }\r\n\r\n    return allSvgs;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      clients,\r\n      points\r\n    } = this.props;\r\n    const { bidHistory } = this.state;\r\n    return (\r\n      <ClientsContainer>\r\n        Points: {points}\r\n        <ClientsHeader>TRUMP</ClientsHeader>\r\n        {bidHistory.length ? bidHistory.map(bidArr => (\r\n          <ClientItem>\r\n            {clients[bidArr[0]]}: {this.getTrumpCardSvgs(bidArr[1])}\r\n          </ClientItem>\r\n        )) : 'Undetermined'}\r\n      </ClientsContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const clients = getExistingClients(state);\r\n  const currentBottomClient = getBottomClient(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const points = getPoints(state);\r\n  const trumpValue = getTrumpValue(state);\r\n\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    clients,\r\n    currentBid,\r\n    trumpValue,\r\n    points,\r\n    currentBottomClient,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  transform: translateX(25%);\r\n  top: 10px;\r\n  left: 0;\r\n  padding: 10px 30px 10px 10px;\r\n  width: 150px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\nconst SvgContainer = styled.img`\r\n  margin: 0 5px;\r\n  width: 40px;\r\n  height: 60px;\r\n  \r\n  &:nth-child(n + 2) {\r\n    margin: 0 -20px;\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps)(DisplayTrump);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameFunction = (props) => {\r\n  return(\r\n    <Button\r\n      id={props.id}\r\n      onClick={() => props.onClickCb && props.onClickCb()}\r\n    >\r\n      {props.label}\r\n    </Button>\r\n  );\r\n}\r\n\r\n\r\n// TODO: ensure common button sizing across all buttons (not just auto)\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  font-family: 'Roboto';\r\n  font-weight: 400;\r\n  margin: 7px;\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px;\r\n  padding: 0 10px;\r\n  height: 25px; \r\n  width: auto;\r\n  background-color: rgba(240,240,240, 1);\r\n  transition: all .1s linear;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: rgba(240,240,240, .8);\r\n  }\r\n`;\r\n\r\nexport default GameFunction;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button as RegularButton } from './RegularButton';\r\n\r\nconst BidButton = (props) => {\r\n  return (\r\n    <Button\r\n      onClick={() => props.onClickCb(props.bid)}\r\n    >\r\n      <span>\r\n        {props.label}\r\n      </span>\r\n      <Icon\r\n        color={props.color}\r\n        dangerouslySetInnerHTML={{ __html: props.icon }}\r\n      >\r\n      </Icon>\r\n    </Button>\r\n  );\r\n}\r\n\r\n// TODO: FIX BUTTON ALIGNMENT AND SIZE\r\nconst Button = styled(RegularButton)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5px;\r\n  padding: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  width: 105px;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  padding-left: 5px;\r\n  font-size: 20px;\r\n  color: red;\r\n  filter: ${props => props.color === 'black' && 'grayscale(1)'};\r\n`;\r\n\r\nexport default BidButton;","const Unicodes = {\r\n  H: '&#9825;',\r\n  S: '&#9828;',\r\n  C: '&#9831;',\r\n  D: '&#9826;',\r\n  SJ: '&#127183;',\r\n  BJ: '&#127183;'\r\n}\r\n\r\nexport default Unicodes;","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport RegularButton from './RegularButton';\nimport GameButton from './GameButton';\nimport Unicodes from '../utils/Unicodes';\nimport PlayingCards from '../utils/Cards';\n\nimport {\n  makeBidIO,\n  returnBottomIO,\n  getClientTurnIO,\n  getTricksPlayedIO,\n  getGeneratedTrumpIO,\n  makePlayIO,\n  setDoneBidIO\n} from '../socket/connect';\n\nimport {\n  setClientTurn,\n  setTricksPlayed,\n  setCurrentBid,\n  toggleBidButtons,\n  updateCardsInHand,\n  toggleCardSelector,\n  updateNumCardsSelected,\n  setPoints,\n} from '../redux/actions';\n\nimport {\n  getName,\n  getId,\n  getMyCards,\n  getValidBids,\n  getCurrentBid,\n  getTrumpValue,\n  getTrumpTracker,\n  getCanBidForBottom,\n  getClientTurn,\n  getNumCardsSelected,\n  updateState\n} from '../redux/selectors';\n\nconst Cards = new PlayingCards();\n\nconst CallBottomButtons = (props) => {\n  // TODO: 1. pass correct value\n  // TODO: 2. remove invalid bids\n\n  // e.g. if I have 2 (2 of spades) -> [2, 'S'];\n  // e.g. no trump: ['S', 'J'] or ['B', 'J']\n  const setBottom = (bid) => {\n    const {\n      myId,\n      trumpTracker,\n      validBids,\n    } = props;\n    makeBidIO(bid);\n    props.setCurrentBid(myId, bid);\n    Cards.updateBid(bid, trumpTracker, validBids);\n  }\n\n  const setDoneBid = () => {\n    const { cards } = props;\n    setDoneBidIO();\n    props.toggleBidButtons(false);\n    getClientTurnIO(enableTurnsListener);\n    getTricksPlayedIO(enableTricksListener);\n    getGeneratedTrumpIO(enableTrumpListener);\n    // resetting trump tracker after bidding\n    updateCardsInHand(cards, { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 });\n  }\n\n  const enableTrumpListener = (clientId, trumpCard) => {\n    props.setCurrentBid(clientId, trumpCard);\n  }\n\n  const enableTurnsListener = (clientId) => {\n    const {\n      myId,\n      setClientTurn,\n      toggleCardSelector\n    } = props;\n    setClientTurn(clientId);\n    console.log('enableTurnsListener', `${clientId}'s turn`);\n    if (myId === clientId) {\n      toggleCardSelector(true);\n    } else {\n      toggleCardSelector(false);\n    }\n  }\n\n  const enableTricksListener = (tricksPlayed) => {\n    props.setTricksPlayed(tricksPlayed);\n  }\n\n  const emitReturnBottom = () => {\n    const {\n      cards,\n      trumpTracker,\n      updateCardsInHand,\n      toggleCardSelector,\n      updateNumCardsSelected\n    } = props;\n    let bottomCards = [];\n    let cardsInHand = [];\n    cards.forEach(card => {\n      if (card.isSelected) {\n        bottomCards.push(card.card);\n      } else {\n        cardsInHand.push(card);\n      }\n    })\n\n    console.log('cards sent back for bottom', bottomCards);\n    updateCardsInHand(cardsInHand, trumpTracker);\n    toggleCardSelector(false);\n    updateNumCardsSelected(0);\n    returnBottomIO(bottomCards);\n  }\n\n  const emitTrickValidator = (isValidPlay, cardsInHand) => {\n    const {\n      cards,\n      updateCardsInHand,\n      trumpTracker,\n      toggleCardSelector,\n      trumpValue,\n      setClientTurn,\n      setCurrentBid,\n      currentBid,\n      updateNumCardsSelected\n    } = props;\n    // alert(isValidPlay)\n    if (isValidPlay === 'valid') {\n    updateCardsInHand(cardsInHand, trumpTracker);\n      toggleCardSelector(false);\n      updateNumCardsSelected(0);\n      if (cardsInHand.length === 0) {\n        setTimeout(() => {\n          setCurrentBid('', []); // clears trump\n          updateCardsInHand([], { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 });\n          setClientTurn(null);\n          setPoints(0);\n        }, 2000);\n      }\n    } else if (isValidPlay === 'invalid') {\n      alert('Invalid Trick');\n      updateCardsInHand(cards.map(cardObj => {\n        cardObj.isSelected = false;\n        return cardObj;\n      }), trumpTracker);\n    } else if (isValidPlay === 'badThrow') {\n      let newCards = [];\n      cardsInHand.forEach(card => {\n        console.log(card, card.card);\n        Cards.insertCard(newCards, card.card, trumpValue, currentBid[1]);\n      })\n      updateCardsInHand(newCards, trumpTracker);\n    }\n  }\n\n  const emitTrick = () => {\n    const { cards } = props;\n    let selectedCards = [];\n    let cardsInHand = [];\n    cards.forEach(card => {\n      if (card.isSelected) {\n        selectedCards.push(card.card);\n      } else {\n        cardsInHand.push(card);\n      }\n    })\n    makePlayIO(selectedCards, cardsInHand, emitTrickValidator);\n  }\n\n  // returns the array of buttons to be rendered\n  const getAvailableBidButtons = () => {\n    const { validBids } = props;\n    // validBids: [numOfCards, valueOfCards]\n    // e.g. if I have 2 (2 of spades) -> [2, 'S'];\n    // e.g. no trump: ['S', 'J'] or ['B', 'J']\n    let bidArray = [];\n    validBids.forEach(bid => {\n      let buttonObject = {\n        rawData: bid\n      };\n      if (bid[1] === 'J') { // have 2 jokers to call no trump\n        bidArray.push(Object.assign({}, buttonObject, {\n          renderData: bid[0] === 'S' ? ['No Trump', 'SJ'] : ['No Trump', 'BJ'],\n          color: bid[0] === 'S' ? 'black' : 'red'\n        }));\n      } else {\n        bidArray.push(Object.assign({}, buttonObject, {\n          renderData: [bid[0], bid[1]],\n          color: (bid[1] === 'S' || bid[1] === 'C') ? 'black' : 'red'\n        }));\n      }\n    })\n    return bidArray;\n  }\n\n\n  const renderBidButtons = () => (\n    <BidButtonContainer>\n      {props.canBidForBottom && getAvailableBidButtons().map((buttonObject, i) => {\n        return (\n          <GameButton\n            bid={buttonObject.rawData}\n            label={buttonObject.renderData[0]}\n            icon={Unicodes[buttonObject.renderData[1]] || ''}\n            color={buttonObject.color}\n            onClickCb={setBottom}\n            key={i}\n          />\n        )\n      })}\n    </BidButtonContainer>\n  )\n\n  const renderFinishButtons = () => (\n    <span>\n      {props.canBidForBottom &&\n        <RegularButton\n          id=\"finishBidBtn\"\n          label=\"Finish Bid\"\n          onClickCb={setDoneBid}\n        />}\n      {/* TODO: set num cards selected to 8 later */}\n      {props.numCardsSelected === 8 && props.cards.length > 25 &&\n        <RegularButton\n          id=\"finishBottomBtn\"\n          label=\"Finish Bottom\"\n          onClickCb={emitReturnBottom}\n        />}\n      {props.clientTurnId === props.myId && !!props.numCardsSelected &&\n        <RegularButton\n          id=\"finishTrickBtn\"\n          label=\"Finish Trick\"\n          onClickCb={emitTrick}\n        />\n      }\n    </span>\n  )\n\n  return (\n    <AllButtonsContainer>\n      {renderBidButtons()}\n      {renderFinishButtons()}\n    </AllButtonsContainer>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  const name = getName(state);\n  const myId = getId(state);\n  const validBids = getValidBids(state);\n  const trumpValue = getTrumpValue(state);\n  const trumpTracker = getTrumpTracker(state);\n  const canBidForBottom = getCanBidForBottom(state);\n  const currentBid = getCurrentBid(state);\n  const clientTurnId = getClientTurn(state);\n  const cards = getMyCards(state);\n  const numCardsSelected = getNumCardsSelected(state);\n\n  const numUpdateStates = updateState(state);\n  return {\n    myId,\n    name,\n    cards,\n    validBids,\n    clientTurnId,\n    currentBid,\n    trumpValue,\n    canBidForBottom,\n    trumpTracker,\n    numCardsSelected,\n    numUpdateStates\n  };\n}\n\nconst AllButtonsContainer = styled.div`\n  z-index: 100;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nconst BidButtonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px;\n  height: 40px;\n`;\n\nexport default connect(mapStateToProps, {\n  setCurrentBid,\n  toggleBidButtons,\n  updateCardsInHand,\n  toggleCardSelector,\n  setClientTurn,\n  setTricksPlayed,\n  updateNumCardsSelected\n})(CallBottomButtons);","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport Cards from '../utils/Cards';\n\nimport {\n  getId,\n  getExistingClients,\n  getExistingClientIds,\n  getClientTurn,\n  getExistingTricks,\n  getScreenSize,\n  updateState\n} from '../redux/selectors';\n\n// TODO: clear all info when trick round is done (determined by listener)\n// make position fixed for the 4 players\nconst PlayerInfo = (props) => {\n  const {\n    myId,\n    clients,\n    clientIds,\n    appWidth,\n    existingTricks,\n    currentClientTurn,\n  } = props;\n  const filteredClientIds = [];\n  const myIndex = clientIds.indexOf(myId);\n  for (let i = 1; i < 4; i++) {\n    filteredClientIds.push(clientIds[(myIndex + i) % 4]);\n  }\n\n\n  const player1 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container1\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[0] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container1>\n    )\n  }\n\n  const player2 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container2\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[1] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container2>\n    )\n  }\n\n  const player3 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container3\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[2] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container3>\n    )\n  }\n\n  const renderPlayerInfo = (index) => {\n    const Card = new Cards('/cardsSVG/');\n    const clientId = filteredClientIds[index];\n    const clientName = clients[clientId];\n    const clientCards = existingTricks[clientId];\n    const allSvgs = [];\n    let svg;\n\n    if (clientCards && clientCards.length > 0) {\n      clientCards.forEach(card => {\n        svg = Card.getSvg(card);\n        allSvgs.push(<SvgContainer src={svg} />)\n      })\n    }\n\n    return (index === 0) ? player1(clientName, clientId, allSvgs) :\n      (index === 1) ? player2(clientName, clientId, allSvgs) :\n        player3(clientName, clientId, allSvgs);\n  }\n\n  return (\n    <>\n      <PlayerSignal\n        myId={myId}\n        clientTurn={currentClientTurn}\n      >\n        Go\n      </PlayerSignal>\n      {renderPlayerInfo(0)}\n      {renderPlayerInfo(1)}\n      {renderPlayerInfo(2)}\n    </>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  const myId = getId(state);\n  const clients = getExistingClients(state);\n  const clientIds = getExistingClientIds(state);\n  const existingTricks = getExistingTricks(state);\n  const currentClientTurn = getClientTurn(state);\n  const { appWidth, appHeight } = getScreenSize(state);\n  const updateNumState = updateState(state);\n  return {\n    myId,\n    clients,\n    clientIds,\n    currentClientTurn,\n    existingTricks,\n    appWidth,\n    appHeight,\n    updateNumState\n  }\n}\n\nconst Container = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: auto;\n  min-width: 200px;\n  height: 90px;\n  padding: 10px 30px 10px 10px;\n  border-radius: 5px;\n  font-size: 24px;\n  background-color: rgba(0,0,0, .20);\n  color: rgba(255, 255, 255, .6);\n`;\n\nconst SvgContainer = styled.img`\n  margin: 0 5px;\n  width: 60px;\n  height: 90px;\n  \n  &:nth-child(n + 2) {\n    margin: 0 -20px;\n  }\n`;\n\nconst Name = styled.span`\n  margin-right: 30px;\n`;\n\nconst Container1 = styled(Container)`\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-left: 30px;\n`;\n\nconst Container2 = styled(Container)`\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-top: 30px;\n`;\n\nconst Container3 = styled(Container)`\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-right: 30px;\n`;\n\nconst PlayerSignal = styled.div`\n  z-index: 0;\n  position: absolute;\n  display: ${props => props.myId === props.clientTurn ? 'flex' : 'none'};\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  color: rgba(255, 255, 255, .1);\n  font-size: 20rem;\n`;\n\n\nexport default connect(mapStateToProps)(PlayerInfo);","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Game from './components/Game';\r\nimport ConnectedClients from './components/ConnectedClients';\r\nimport DisplayTrump from \"./components/DisplayTrump\";\r\nimport ButtonsContainer from './components/ButtonsContainer';\r\nimport RegularButton from './components/RegularButton';\r\nimport PlayerInfo from \"./components/PlayerInfo\";\r\n\r\nimport TractorSvg from './tractor_logo.svg'\r\n\r\nimport {\r\n  connectToSocketIO,\r\n  getConnectedClientsIO,\r\n} from './socket/connect';\r\n\r\nimport {\r\n  getName,\r\n  getScreenSize,\r\n  updateState\r\n} from './redux/selectors';\r\n\r\nimport {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n} from './redux/actions';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      connectionStatus: false, \r\n      iconWidth: 150,\r\n      inputWidth: 100\r\n    };\r\n\r\n    window.addEventListener('resize', this.setAppSizes.bind(this));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setAppSizes();\r\n  }\r\n\r\n  setAppSizes() {\r\n    let screenWidth = window.innerWidth;\r\n    let screenHeight = window.innerHeight;\r\n    let appWidth, appHeight, iconWidth, inputWidth;\r\n\r\n    if (screenWidth >= 2560 && screenHeight >= 1440) {\r\n      appWidth = 2560;\r\n      appHeight = 1440;\r\n      iconWidth = 250;\r\n      inputWidth = 200;\r\n    } else if (screenWidth >= 1920 && screenHeight >= 1080) {\r\n      appWidth = 1920;\r\n      appHeight = 1080;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    } else {\r\n      appWidth = 1280;\r\n      appHeight = 720;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    }\r\n\r\n    this.props.setScreenSize(appWidth, appHeight);\r\n    this.setState({\r\n      iconWidth,\r\n      inputWidth\r\n    })\r\n  }\r\n\r\n  setConnectionStatus(connectionStatus, id, name, roomName) {\r\n    this.setState({ connectionStatus });\r\n    if (connectionStatus) {\r\n      getConnectedClientsIO(this.setConnectedClients.bind(this));\r\n      this.props.setUser(name, id, roomName);\r\n    }\r\n  }\r\n\r\n  setConnectedClients(sockets) {\r\n    this.props.updateClientList(sockets);\r\n  }\r\n\r\n  joinRoomValidator(isConnected) {\r\n    if(!isConnected) {\r\n      alert('Room is full.');\r\n    }\r\n  }\r\n\r\n  connect(ev) {\r\n    ev.preventDefault();\r\n    let name = this.nameRef.value;\r\n    let room = this.roomRef.value;\r\n    if (!name) {\r\n      alert('enter a name');\r\n      return;\r\n    }\r\n    if (!room) {\r\n      alert('enter a room');\r\n      return;\r\n    }\r\n\r\n    if (name.length > 7) {\r\n      name = name.slice(0, 7);\r\n    }\r\n    connectToSocketIO(this.setConnectionStatus.bind(this), this.joinRoomValidator, name, room);\r\n  }\r\n\r\n  renderPreConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    const {\r\n      iconWidth,\r\n      inputWidth\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <Title>\r\n          {/* Tractor */}\r\n          <Logo\r\n            iconWidth={iconWidth}\r\n            src={TractorSvg}\r\n            draggable={false}\r\n          />\r\n        </Title>\r\n        <Form\r\n          onSubmit={(ev) => { this.connect(ev) }}\r\n        >\r\n          <Input\r\n            autoFocus\r\n            placeholder=\"Enter a name!\"\r\n            inputWidth={inputWidth}\r\n            ref={(nameRef) => { this.nameRef = nameRef }}\r\n          />\r\n          <Input\r\n            autoFocus\r\n            placeholder=\"Enter a room code!\"\r\n            inputWidth={inputWidth}\r\n            ref={(roomRef) => { this.roomRef = roomRef }}\r\n          />\r\n          <RegularButton\r\n            label=\"Join\"\r\n          />\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\n  renderPostConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <PlayerInfo />\r\n        <DisplayTrump />\r\n        <ConnectedClients />\r\n        <ButtonsContainer />\r\n        <Game />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { connectionStatus } = this.state;\r\n    return connectionStatus ? this.renderPostConnection() : this.renderPreConnection();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const name = getName(state);\r\n  const numStateChanges = updateState(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  return {\r\n    name,\r\n    appWidth,\r\n    appHeight,\r\n    numStateChanges,\r\n  };\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${props => `${props.width}px`};\r\n  height: ${props => `${props.height}px`};\r\n  background-color: green;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 5px;\r\n  padding: 0;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  margin: 5px 15px;\r\n  padding: 7px 10px;\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px 2px 0 0;\r\n  width: ${prop => `${prop.inputWidth}px`};\r\n  height: 15px;\r\n  background-color: darkgreen;\r\n  color: rgba(255, 255, 255, .9);\r\n  transition: all .3s cubic-bezier(0.65, 0, 0.35, 1);\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, .7);\r\n  }\r\n\r\n  &:focus, &:active {\r\n    border-bottom: rgba(255, 255, 255, .7) 2px solid;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: ${prop => `${prop.iconWidth}px`};\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n})(App);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const currState = {\r\n  appWidth: 1920,\r\n  appHeight: 1080,\r\n  socket: { connected: false },\r\n  clients: {},\r\n  clientIds: [],\r\n  name: '',\r\n  id: '',\r\n  cards: [],\r\n  trump: '2',\r\n  room: '',\r\n  currentBid: null,\r\n  currentBottomClient: null,\r\n  currentClientTurn: null,\r\n  existingTricks: {},\r\n  trumpTracker: { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 },\r\n  validBids: [],\r\n  points: 0,\r\n  // canSelectCards & numCardsSelected is for\r\n  // both returning bottom and playing cards on your turn\r\n  canSelectCards: false,\r\n  numCardsSelected: 0,\r\n  // canBidForBottom is only true beginning of each round\r\n  canBidForBottom: true,\r\n  // TODO: add everyone elses play - should be by socketId index\r\n  // [[cards by player0], [cards by player1]]\r\n  cardsPlayed: [],\r\n  numStateUpdated: 0\r\n}\r\n\r\nexport default (state = currState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SCREEN_SIZE':\r\n      return Object.assign({}, state, {\r\n        appWidth: action.payload.width,\r\n        appHeight: action.payload.height\r\n      })\r\n    case 'UPDATE_CLIENT_LIST':\r\n      return Object.assign({}, state, {\r\n        clients: action.payload.clients,\r\n        clientIds: action.payload.clientIds,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_USER':\r\n      console.log(action.payload)\r\n      return Object.assign({}, state, {\r\n        name: action.payload.name,\r\n        room: action.payload.room,\r\n        id: action.payload.id\r\n      })\r\n    case 'SET_DECLARER':\r\n      console.log(action.payload);\r\n      return Object.assign({}, state, {\r\n        currentBottomClient: state.clients[action.payload]\r\n      })\r\n    case 'UPDATE_MY_HAND':\r\n      return Object.assign({}, state, {\r\n        cards: action.payload.cards,\r\n        trumpTracker: action.payload.trumpTracker,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_VALID_BIDS':\r\n      return Object.assign({}, state, {\r\n        validBids: action.payload,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_TRUMP_VALUE':\r\n      return Object.assign({}, state, {\r\n        trump: action.payload\r\n      })\r\n    case 'SET_CURRENT_BID':\r\n      return Object.assign({}, state, {\r\n        currentBid: action.payload.bid,\r\n        currentBottomClient: action.payload.socketId,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'CAN_SELECT_CARDS':\r\n      return Object.assign({}, state, {\r\n        canSelectCards: action.payload\r\n      })\r\n    case 'UPDATE_NUM_CARDS_SELECTED':\r\n      return Object.assign({}, state, {\r\n        numCardsSelected: action.payload\r\n      })\r\n    case 'TOGGLE_BID_BUTTONS':\r\n      return Object.assign({}, state, {\r\n        canBidForBottom: action.payload\r\n      })\r\n    case 'SET_CLIENT_TURN':\r\n      return Object.assign({}, state, {\r\n        currentClientTurn: action.payload\r\n      })\r\n    case 'SET_ALL_TRICKS':\r\n      return Object.assign({}, state, {\r\n        existingTricks: action.payload,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_POINTS':\r\n      return Object.assign({}, state, {\r\n        points: action.payload,\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n      <App />\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
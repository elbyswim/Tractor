{"version":3,"sources":["tractor_logo.svg","utils/Cards.js","socket/connect.js","redux/selectors.js","redux/actions.js","components/Game.js","components/ConnectedClients.js","components/RegularButton.js","components/DisplayTrump.js","components/GameButton.js","utils/Unicodes.js","components/ButtonsContainer.js","components/PlayerInfo.js","App.js","serviceWorker.ts","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","Cards","path","suits","jokers","cards","suitOrder","valueOrder","this","Set","arr","has","valid_card","valid_suit","isValidCard","console","log","card","trump","newCard","trumpValue","trumpSuit","cardObject","isSelected","svg","getSvg","length","i","splice","push","diamonds","clubs","spades","hearts","trumpD","trumpS","trumpH","trumpC","sortedCards","forEach","cardObj","cardVal","concat","trumpTracker","validBids","currentBid","bid","_","isEqual","socket","connectToSocketIO","getStatusCb","validator","name","room","io","setStatusCb","on","status","id","getConnectionStatus","emit","setSocketIdIO","getScreenSize","store","appWidth","appHeight","getExistingClients","clients","getExistingClientIds","clientIds","updateState","numStateUpdated","getName","getId","getMyCards","getValidBids","getCurrentBid","getTrumpValue","getTrumpTracker","getNumCardsSelected","numCardsSelected","getExistingTricks","existingTricks","getClientTurn","currentClientTurn","updateCardsInHand","type","payload","setCurrentBid","socketId","toggleCardSelector","canSelectCards","updateNumCardsSelected","num","toggleBidButtons","canBid","setClientTurn","clientId","setTricksPlayed","tricks","setCanStartRound","toggle","PlayingCards","Game","props","state","cardWidth","cardHeight","cardSelectedHeight","cardHoveredHeight","numCardsForBottom","setStage1Listeners","setCardSize","setTrumpValueCb","setCardsCb","setNewBidCb","setBottomCardsCb","getFinalBidCb","getPointsCb","getCurrentWinnerCb","getNewRoundCb","setTrumpValue","bind","setCards","updateBidStatus","receiveHiddenBottom","getBottomIO","receiveBottomCards","sortHand","getPoints","pointsFromNonBottom","getCurrentWinner","startNewRound","setPoints","setValidBids","setCurrentTrickWinner","points","setState","insertCard","newTrump","bottomCards","bottomCard","cardIndex","window","alert","toggleSingleCard","myId","map","receiveBid","numCards","Container","height","CardContainer","getExistingTrickSvg","MyCardImgContainer","zIndex","MyCardImg","draggable","width","src","key","isMobile","CardImgContainer","onClick","toggleCards","CardImg","Component","styled","div","prop","img","span","Math","abs","connect","connectedClients","getCanSelectCards","changeState","ClientsContainer","ul","ClientsHeader","ClientItem","li","roomName","getRoom","clientTurn","numStateChanges","useEffect","document","title","outputString","renderClientStatus","Button","button","margin","GameFunction","onClickCb","disabled","undefined","label","DisplayTrump","bidHistory","updateComponent","prevProps","currentBottomClient","prevBottomClient","prevBid","JSON","stringify","setTimeout","shift","Card","allSvgs","SvgContainer","canStartNewRound","RegularButton","bidArr","getTrumpCardSvgs","getBottomClient","getCanStartNewRound","myCards","Icon","color","BidButton","dangerouslySetInnerHTML","__html","icon","Unicodes","H","S","C","D","SJ","BJ","AllButtonsContainer","BidButtonContainer","canBidForBottom","getCanBidForBottom","clientTurnId","numUpdateStates","setBottom","makeBidIO","updateBid","setDoneBid","getClientTurnCb","getTricksPlayedCb","getGeneratedTrumpCb","enableTurnsListener","enableTricksListener","enableTrumpListener","trumpCard","tricksPlayed","emitReturnBottom","bottom","cardsInHand","emitTrickValidator","isValidPlay","newCards","emitTrick","selectedCards","trick","makePlayIO","bidArray","buttonObject","rawData","Object","assign","renderData","getAvailableBidButtons","GameButton","flash","keyframes","Wrapper","Name","Container1","curWinner","css","Container2","Container3","PlayerSignal","currentTrickWinner","getCurrentTrickWinner","updateNumState","filteredClientIds","myIndex","indexOf","renderPlayerInfo","index","clientName","clientCards","cardSvg","player1","player2","player3","App","connectionStatus","isConnecting","iconWidth","inputWidth","addEventListener","setAppSizes","screenWidth","innerWidth","screenHeight","innerHeight","setScreenSize","setClientsCb","setConnectedClients","setUser","sockets","updateClientList","isConnected","ev","preventDefault","nameRef","value","roomRef","slice","setConnectionStatus","joinRoomValidator","toLowerCase","Title","Logo","TractorSvg","Form","onSubmit","Input","autoFocus","placeholder","ref","ButtonsContainer","renderPostConnection","renderPreConnection","h1","form","input","keys","Boolean","location","hostname","match","currState","connected","cardsPlayed","createStore","action","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98d46902.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tractor_logo.e6e625d4.svg\";","import _ from 'underscore';\r\n\r\nexport default class Cards {\r\n  // TODO: DEPLOYMENT CARDS PATH IS DIFFERENT\r\n  // path = 'https://justinli0423.github.io/Tractor/cardsSVG/'; // local\r\n  path = '/Tractor/cardsSVG/'; //deployment\r\n  suits = [];\r\n  jokers = [];\r\n  cards = [];\r\n  // want a black, red, black, red order\r\n  suitOrder = { 'S': 0, 'D': 1, 'C': 2, 'H': 3 };\r\n  // order already works for NT and spades trump\r\n  valueOrder = {\r\n    'A': 0,\r\n    'K': 1,\r\n    'Q': 2,\r\n    'J': 3,\r\n    '10': 4,\r\n    '9': 5,\r\n    '8': 6,\r\n    '7': 7,\r\n    '6': 8,\r\n    '5': 9,\r\n    '4': 10,\r\n    '3': 11,\r\n    '2': 12\r\n  }\r\n\r\n  constructor(path) {\r\n    // this.path = path;\r\n    this.suits = new Set(['H', 'C', 'S', 'D']); //hearts, clubs, spades, diamonds\r\n    this.jokers = new Set(['S', 'B']); // Small, big\r\n    this.cards = new Set(['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']);\r\n  }\r\n\r\n  isValidCard(arr) {\r\n    if (arr[1] === 'J') {\r\n      // if it is a joker,\r\n      return this.jokers.has(arr[0]);\r\n    }\r\n\r\n    let valid_card = this.cards.has(arr[0]);\r\n    let valid_suit = this.suits.has(arr[1]);\r\n\r\n    return valid_card && valid_suit;\r\n  }\r\n\r\n  getSvg(arr) {\r\n    if (!this.isValidCard(arr)) {\r\n      console.log(`Invalid card: ${arr}`);\r\n    }\r\n    return `${this.path}${arr[0]}${arr[1]}.svg`;\r\n  }\r\n\r\n  isTrump(card) {\r\n    return card[0] === this.trump;\r\n  }\r\n\r\n  insertCard(cards, newCard, trumpValue, trumpSuit) {\r\n    const cardObject = {\r\n      card: newCard,\r\n      isSelected: false,\r\n      svg: this.getSvg(newCard)\r\n    }\r\n    if (trumpSuit) {\r\n      // diamonds are trump -> want diamonds first -> move spades to back\r\n      if (trumpSuit === 'D') {\r\n        this.suitOrder['S'] = 4;\r\n        // clubs are trump -> switch clubs and spades\r\n      } else if (trumpSuit === 'C') {\r\n        this.suitOrder['C'] = 0;\r\n        this.suitOrder['S'] = 2;\r\n        // hearts are trump -> move hearts to front\r\n      } else if (trumpSuit === 'H') {\r\n        this.suitOrder['H'] = -1;\r\n      }\r\n    }\r\n    if (cards.length > 0) {\r\n      let i = 0;\r\n      // card is a joker\r\n      if (newCard[0] === 'S' || newCard[1] === 'J') {\r\n        while (i < cards.length && cards[i].card[0] === 'B' && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // card value is trump\r\n      } else if (newCard[0] === trumpValue) {\r\n        // Jokers come first\r\n        while (i < cards.length && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // insert based on order\r\n        while (i < cards.length && cards[i].card[0] === trumpValue && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        // card is neither a joker nor a \"trump value trump\"\r\n      } else {\r\n        while (i < cards.length && (cards[i].card[1] === 'J' || cards[i].card[0] === trumpValue)) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] === this.suitOrder[newCard[1]] && this.valueOrder[cards[i].card[0]] < this.valueOrder[newCard[0]]) {\r\n          i++;\r\n        }\r\n      }\r\n      cards.splice(i, 0, cardObject);\r\n    } else {\r\n      cards.push(cardObject);\r\n    }\r\n  }\r\n  \r\n  // This is for after receiving trump\r\n  // direction:\r\n    // 1: increasing (3....A)\r\n    // 0: decreasing (A....3)\r\n  sortHand(cards, trumpValue, trumpSuit, direction = 0) {\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let hearts = [];\r\n    let jokers = [];\r\n    let trumpD = [];\r\n    let trumpS = [];\r\n    let trumpH = [];\r\n    let trumpC = [];\r\n\r\n    let sortedCards = [];\r\n\r\n    if (trumpSuit === 'S' || trumpSuit === 'J') {\r\n      // if direction changed, sort otherway\r\n      // otherwise nothing to do for no trump or spades\r\n      return cards;\r\n    }\r\n\r\n    // only get here if there is a trump suit change\r\n    cards.forEach((cardObj) => {\r\n      let cardVal = cardObj.card;\r\n      if (cardVal[1] === 'J') {\r\n        jokers.push(cardObj);\r\n      }\r\n      if (cardVal[0] === trumpValue) {\r\n        if (cardVal[1] === 'S') {\r\n          trumpS.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          trumpC.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          trumpH.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          trumpD.push(cardObj);\r\n        }\r\n      }\r\n      else {\r\n        if (cardVal[1] === 'S') {\r\n          spades.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          clubs.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          hearts.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          diamonds.push(cardObj);\r\n        }\r\n      }\r\n    });\r\n\r\n    sortedCards = sortedCards.concat(jokers);\r\n    if (trumpSuit === 'C') {\r\n      sortedCards = sortedCards.concat(trumpC, trumpH, trumpS, trumpD, clubs, hearts, spades, diamonds);\r\n    }\r\n    if (trumpSuit === 'H') {\r\n      sortedCards = sortedCards.concat(trumpH, trumpS, trumpD, trumpC, hearts, spades, diamonds, clubs);\r\n    }\r\n    if (trumpSuit === 'D') {\r\n      sortedCards = sortedCards.concat(trumpD, trumpC, trumpH, trumpS, diamonds, clubs, hearts, spades);\r\n    }\r\n    console.log('sortedCards', sortedCards);\r\n    return sortedCards;\r\n  }\r\n\r\n  // TODO\r\n  newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue) {\r\n    if (newCard[1] === 'J') {\r\n      trumpTracker[newCard[0] + 'J'] += 1\r\n      if (trumpTracker[newCard[0] + 'J'] === 2) {\r\n        if (!currentBid || currentBid[1] !== 'J' || (currentBid[0] === 'S' && newCard[0] === 'B')) {\r\n          validBids.push(newCard)\r\n        }\r\n      }\r\n    } else if (newCard[0] === trumpValue) {\r\n      trumpTracker[newCard[1]] += 1;\r\n      if (!currentBid || (currentBid[0] === 1 && trumpTracker[newCard[1]] === 2)) {\r\n        validBids.push([trumpTracker[newCard[1]], newCard[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  updateBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    if (bid[0] === 1) {\r\n      if (trumpTracker[bid[1]] === 2) {\r\n        validBids.push([2, bid[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  receiveBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    \r\n    if (_.isEqual(bid, ['B', 'J'])) {\r\n      return;\r\n    } \r\n    \r\n    if (trumpTracker['BJ'] === 2) {\r\n      validBids.push(['B', 'J'])\r\n    }\r\n\r\n    if (_.isEqual(bid, ['S', 'J'])) {\r\n      return;\r\n    }\r\n\r\n    if (trumpTracker['SJ'] === 2) {\r\n      validBids.push(['S', 'J'])\r\n    }\r\n\r\n    if (bid[0] === 2) {\r\n      return;\r\n    } \r\n\r\n    if (trumpTracker['S'] === 2) {\r\n      validBids.push([2, 'S'])\r\n    }\r\n    \r\n    if (trumpTracker['D'] === 2) {\r\n      validBids.push([2, 'D'])\r\n    }\r\n    \r\n    if (trumpTracker['C'] === 2) {\r\n      validBids.push([2, 'C'])\r\n    }\r\n    \r\n    if (trumpTracker['H'] === 2) {\r\n      validBids.push([2, 'H'])\r\n    }\r\n  }\r\n};\r\n","import io from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:8000\";\r\n\r\nvar socket = null;\r\n\r\nexport function connectToSocketIO(getStatusCb, validator, name, room) {\r\n  // socket = io(ENDPOINT);\r\n  // if (!socket.connected) {\r\n    socket = io('tractorserver.herokuapp.com');\r\n  // }\r\n  getConnectionStatus(getStatusCb, name, room);\r\n  setSocketIdIO(name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT EMITTERS ------------------\r\nexport function makePlayIO(trick, cardsInHand, validator) {\r\n  socket.emit('clientPlay', trick, cardsInHand, validator); \r\n}\r\n\r\nexport function startNewRoundIO() {\r\n  socket.emit('startNewRound');\r\n}\r\n\r\nexport function makeBidIO(bid) {\r\n  socket.emit('newBid', bid);\r\n}\r\n\r\nexport function setDoneBidIO() {\r\n  socket.emit('doneBid');\r\n}\r\n\r\n// returning the 8 cards you don't want\r\nexport function returnBottomIO(bottom) {\r\n  console.log(socket.id, 'returning bottom', bottom);\r\n  socket.emit('newBottom', bottom);\r\n}\r\n\r\nfunction setSocketIdIO(name, room, validator) {\r\n  socket.emit('setSocketId', name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT LISTENERS ------------------\r\nexport function getNewRoundIO(getNewRoundCb) {\r\n  socket.on('newRound', getNewRoundCb);\r\n}\r\n\r\nexport function getPointsIO(getPointsCb) {\r\n  socket.on('opponentPoints', (pointsFromNonBottom) => getPointsCb(pointsFromNonBottom));\r\n}\r\n\r\nexport function getGeneratedTrumpIO(getGeneratedTrumpCb) {\r\n  socket.on('generateTrump', (clientId, card) => getGeneratedTrumpCb(clientId, card));\r\n}\r\n\r\nexport function getCurrentWinnerIO(getCurrentWinnerCb) {\r\n  socket.on('currentWinner', (clientId) => {\r\n    getCurrentWinnerCb(clientId);\r\n    console.log(clientId);\r\n  });\r\n}\r\n\r\nexport function getFinalBidIO (getFinalBidCb) {\r\n  socket.on('bidWon', getFinalBidCb);\r\n}\r\n\r\nexport function getClientTurnIO(getClientTurnCb) {\r\n  socket.on('nextClient', (clientId) => {\r\n    getClientTurnCb(clientId);\r\n  });\r\n}\r\n\r\nexport function getTricksPlayedIO(getTricksPlayedCb) {\r\n  socket.on('cardsPlayed', (tricks) => {\r\n    console.log('Received current tricks', tricks);\r\n    getTricksPlayedCb(tricks);\r\n  });\r\n}\r\n\r\nexport function getBottomIO(setBottomCardsCb) {\r\n  socket.on('originalBottom', (cards) => setBottomCardsCb(cards));\r\n}\r\n\r\nexport function getHiddenBottomIO(setBottomCardsCb) {\r\n  socket.on('hiddenBottom', (cards) => setBottomCardsCb(cards));\r\n}\r\n\r\nexport function getConnectedClientsIO(setClientsCb) {\r\n  socket.on('newClientConnection', setClientsCb);\r\n}\r\n\r\nexport function getCardsIO(setCardsCb) {\r\n  socket.on('dealCard', setCardsCb);\r\n}\r\n\r\nexport function getNewBidIO(setNewBidCb) {\r\n  socket.on('setNewBid', (socketId, bid) => setNewBidCb(socketId, bid));\r\n}\r\n\r\nexport function getTrumpValueIO(setTrumpValueCb) {\r\n  socket.on('setTrumpValue', trump => setTrumpValueCb(trump));\r\n}\r\n\r\nfunction getConnectionStatus(setStatusCb, name, room) {\r\n  socket.on('connectionStatus', status => {\r\n    console.log('connected');\r\n    setStatusCb(status, socket.id, name, room);\r\n  });\r\n}\r\n","export const getScreenSize = store => ({\r\n  appWidth: store.appWidth,\r\n  appHeight: store.appHeight\r\n});\r\n\r\nexport const getRoom = store => store.room;\r\n\r\nexport const getExistingClients = store => store.clients;\r\n\r\nexport const getExistingClientIds = store => store.clientIds;\r\n\r\nexport const updateState = store => store.numStateUpdated;\r\n\r\nexport const getName = store => store.name;\r\n\r\nexport const getId = store => store.id;\r\n\r\nexport const getBottomClient = store => store.currentBottomClient;\r\n\r\nexport const getMyCards = store => store.cards;\r\n\r\nexport const getValidBids = store => store.validBids;\r\n\r\nexport const getCurrentBid = store => store.currentBid;\r\n\r\nexport const getTrumpValue = store => store.trump;\r\n\r\nexport const getTrumpTracker = store => store.trumpTracker;\r\n\r\nexport const getCanSelectCards = store => store.canSelectCards;\r\n\r\nexport const getNumCardsSelected = store => store.numCardsSelected;\r\n\r\nexport const getCanBidForBottom = store => store.canBidForBottom;\r\n\r\nexport const getExistingTricks = store => store.existingTricks;\r\n\r\nexport const getClientTurn = store => store.currentClientTurn;\r\n\r\nexport const getPoints = store => store.points;\r\n\r\nexport const getCurrentTrickWinner = store => store.currentTrickWinner;\r\n\r\nexport const getCanStartNewRound = store => store.canStartNewRound;","export const setScreenSize = (width, height) => ({\n  type: 'SET_SCREEN_SIZE',\n  payload: {\n    width,\n    height\n  }\n})\n\nexport const updateClientList = (clients) => ({\n  type: 'UPDATE_CLIENT_LIST',\n  payload: {\n    clients,\n    clientIds: Object.keys(clients)\n  }\n});\n\nexport const setUser = (name, id, room) => ({\n  type: 'SET_USER',\n  payload: {\n    name,\n    id,\n    room,\n  }\n});\n\nexport const setCurrentTrickWinner = (id) => ({\n  type: 'SET_CURRENT_TRICK_WINNER',\n  payload: id\n});\n\nexport const setBottomClient = (socketId) => ({\n  type: 'SET_DECLARER',\n  payload: socketId\n})\n\nexport const updateCardsInHand = (cards, trumpTracker) => ({\n  type: 'UPDATE_MY_HAND',\n  payload: {\n    trumpTracker,\n    cards\n  }\n})\n\nexport const setValidBids = (validBids) => ({\n  type: 'SET_VALID_BIDS',\n  payload: validBids\n})\n\nexport const setCurrentBid = (socketId, bid) => ({\n  type: 'SET_CURRENT_BID',\n  payload: {\n    socketId,\n    bid\n  }\n})\n\nexport const setTrumpValue = (trump) => ({\n  type: 'SET_TRUMP_VALUE',\n  payload: trump\n})\n\nexport const toggleCardSelector = (canSelectCards) => ({\n  type: 'CAN_SELECT_CARDS',\n  payload: canSelectCards\n})\n\nexport const updateNumCardsSelected = (num) => ({\n  type: 'UPDATE_NUM_CARDS_SELECTED',\n  payload: num\n})\n\nexport const toggleBidButtons = (canBid) => ({\n  type: 'TOGGLE_BID_BUTTONS',\n  payload: canBid\n})\n\nexport const setClientTurn = (clientId) => ({\n  type: 'SET_CLIENT_TURN',\n  payload: clientId\n})\n\nexport const setTricksPlayed = (tricks) => ({\n  type: 'SET_ALL_TRICKS',\n  payload: tricks\n})\n\nexport const setPoints = (points) => ({\n  type: 'SET_POINTS',\n  payload: points\n})\n\nexport const setCanStartRound = (toggle) => ({\n  type: 'TOGGLE_NEW_ROUND',\n  payload: toggle\n})","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport PlayingCards from '../utils/Cards';\r\nimport {\r\n  getCardsIO,\r\n  getNewBidIO,\r\n  getTrumpValueIO,\r\n  getPointsIO,\r\n  getNewRoundIO,\r\n  getCurrentWinnerIO,\r\n  getFinalBidIO,\r\n  getHiddenBottomIO,\r\n  getBottomIO\r\n} from \"../socket/connect\";\r\n\r\nimport {\r\n  getId,\r\n  getMyCards,\r\n  updateState,\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getTrumpTracker,\r\n  getCanSelectCards,\r\n  getNumCardsSelected,\r\n  getExistingTricks,\r\n  getScreenSize,\r\n  getValidBids\r\n} from '../redux/selectors';\r\n\r\nimport {\r\n  updateCardsInHand,\r\n  setCurrentBid,\r\n  setClientTurn,\r\n  setTricksPlayed,\r\n  setPoints,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  setCanStartRound,\r\n  toggleBidButtons,\r\n  setCurrentTrickWinner,\r\n  setValidBids\r\n} from '../redux/actions';\r\n\r\nconst Cards = new PlayingCards('/cardsSVG/');\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cardWidth: 120,\r\n      cardHeight: 168,\r\n      cardSelectedHeight: -30,\r\n      cardHoveredHeight: -50,\r\n      numCardsForBottom: 0\r\n    };\r\n  }\r\n  // all listeners required pre-game goes here\r\n  componentDidMount() {\r\n    this.setStage1Listeners();\r\n    this.setCardSize();\r\n  }\r\n\r\n  setStage1Listeners() {\r\n    getTrumpValueIO(this.props.setTrumpValue.bind(this));\r\n    getCardsIO(this.setCards.bind(this));\r\n    getNewBidIO(this.updateBidStatus.bind(this));\r\n    getHiddenBottomIO(this.receiveHiddenBottom.bind(this));\r\n    getBottomIO(this.receiveBottomCards.bind(this));\r\n    getFinalBidIO(this.sortHand.bind(this));\r\n    getPointsIO(this.getPoints.bind(this));\r\n    getCurrentWinnerIO(this.getCurrentWinner.bind(this));\r\n    getNewRoundIO(this.startNewRound.bind(this));\r\n    this.setCardSize();\r\n  }\r\n\r\n  startNewRound() {\r\n    const {\r\n      setCurrentBid,\r\n      setClientTurn,\r\n      setTricksPlayed,\r\n      setPoints,\r\n      toggleBidButtons,\r\n      setValidBids,\r\n      setCurrentTrickWinner,\r\n      updateCardsInHand\r\n    } = this.props;\r\n\r\n    setCurrentBid('', null);\r\n    updateCardsInHand([], { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 });\r\n    setValidBids([]);\r\n    setClientTurn(null);\r\n    setTricksPlayed({});\r\n    setCurrentTrickWinner('nobody');\r\n    setPoints(0);\r\n    toggleBidButtons(true);\r\n    console.log('resetting round');\r\n  }\r\n\r\n  getCurrentWinner(clientId) {\r\n    console.log('current trick winner', clientId);\r\n    this.props.setCurrentTrickWinner(clientId);\r\n  }\r\n\r\n  sortHand() {\r\n    const {\r\n      cards,\r\n      currentBid,\r\n      trumpTracker,\r\n      trumpValue\r\n    } = this.props;\r\n    this.props.updateCardsInHand(Cards.sortHand(cards, trumpValue, currentBid[1]), trumpTracker);\r\n  }\r\n\r\n  getPoints(points) {\r\n    this.props.setPoints(points);\r\n  }\r\n\r\n  setCardSize() {\r\n    const {\r\n      appWidth,\r\n      appHeight\r\n    } = this.props;\r\n    let cardWidth, cardHeight, cardHoveredHeight, cardSelectedHeight;\r\n\r\n    if (appWidth === 2560) {\r\n      cardWidth = 204;\r\n      cardHeight = 286;\r\n      cardSelectedHeight = -70;\r\n      cardHoveredHeight = -90;\r\n    }\r\n    if (appWidth === 1920) {\r\n      cardWidth = 120;\r\n      cardHeight = 168;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n    if (appWidth === 1280) {\r\n      cardWidth = 110;\r\n      cardHeight = 148;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n\r\n    if (appHeight > appWidth) {\r\n      cardWidth = 80;\r\n      cardHeight = 120;\r\n      cardSelectedHeight = -20;\r\n      cardHoveredHeight = -40;\r\n    }\r\n\r\n    this.setState({\r\n      cardWidth,\r\n      cardHeight,\r\n      cardHoveredHeight,\r\n      cardSelectedHeight\r\n    });\r\n  }\r\n\r\n  setCards(newCard) {\r\n    let {\r\n      cards,\r\n      trumpValue,\r\n      trumpTracker,\r\n      validBids,\r\n      currentBid,\r\n      setValidBids,\r\n      updateCardsInHand\r\n    } = this.props;\r\n    Cards.insertCard(cards, newCard, trumpValue, currentBid);\r\n    Cards.newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue);\r\n    setValidBids(validBids);\r\n    updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  receiveBottomCards(bottomCards) {\r\n    bottomCards.forEach(bottomCard => {\r\n      this.setCards(bottomCard);\r\n    });\r\n    this.props.toggleCardSelector(true);\r\n    this.props.toggleBidButtons(false);\r\n  }\r\n\r\n  receiveHiddenBottom(bottomCards) {\r\n    bottomCards.forEach(bottomCard => {\r\n      this.setCards(bottomCard);\r\n    });\r\n    this.props.toggleCardSelector(false);\r\n    this.props.toggleBidButtons(false);\r\n    this.props.setCanStartRound(true);\r\n  }\r\n\r\n  toggleSingleCard(cardIndex) {\r\n    const {\r\n      cards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n\r\n    if (!isSelected) {\r\n      this.props.updateNumCardsSelected(numCardsSelected + 1);\r\n    } else {\r\n      this.props.updateNumCardsSelected(numCardsSelected - 1);\r\n    }\r\n    cards[cardIndex].isSelected = !isSelected;\r\n  }\r\n\r\n  toggleCards(cardIndex) {\r\n    const {\r\n      cards,\r\n      trumpTracker,\r\n      canSelectCards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n    console.log('canToggleCards', canSelectCards);\r\n\r\n    // numBottom\r\n    if (cards.length > 25 && !isSelected && numCardsSelected === 8) {\r\n      window.alert('Maximum cards for bottom selected');\r\n      return;\r\n    }\r\n\r\n    this.toggleSingleCard(cardIndex);\r\n    this.props.updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  getExistingTrickSvg() {\r\n    const {\r\n      myId,\r\n      existingTricks\r\n    } = this.props;\r\n    if (!existingTricks || !existingTricks[myId]) {\r\n      return [];\r\n    }\r\n    \r\n    return existingTricks[myId].map((card) => Cards.getSvg(card));\r\n  }\r\n\r\n  updateBidStatus(socketId, bid) {\r\n    const {\r\n      trumpTracker,\r\n      validBids,\r\n    } = this.props;\r\n    Cards.receiveBid(bid, trumpTracker, validBids);\r\n    this.props.setCurrentBid(socketId, bid);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      cards,\r\n      numCards,\r\n      appWidth,\r\n      appHeight\r\n    } = this.props;\r\n    const {\r\n      cardWidth,\r\n      cardHeight,\r\n      cardSelectedHeight,\r\n      cardHoveredHeight\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        height={cardHeight}\r\n      >\r\n        <CardContainer>\r\n          {this.getExistingTrickSvg().map((card, i) => {\r\n              return (\r\n                <MyCardImgContainer\r\n                  zIndex={i}\r\n                >\r\n                  <MyCardImg\r\n                    draggable={false}\r\n                    width={cardWidth}\r\n                    height={cardHeight}\r\n                    src={card}\r\n                    key={i}\r\n                  />\r\n                </MyCardImgContainer>\r\n              )\r\n            })\r\n          }\r\n        </CardContainer>\r\n        <CardContainer\r\n          isMobile={appHeight > appWidth}\r\n        >\r\n          {cards.map((card, i) => {\r\n            return (\r\n              <CardImgContainer\r\n                height={cardHeight}\r\n                onClick={() => { this.toggleCards(i) }}\r\n                numCards={numCards}\r\n                cardWidth={cardWidth}\r\n                cardHoveredHeight={cardHoveredHeight}\r\n                zIndex={i}\r\n              >\r\n                <CardImg\r\n                  // TODO: enable drag and drop custom sorting later?\r\n                  draggable={false}\r\n                  width={cardWidth}\r\n                  height={cardHeight}\r\n                  isSelected={card.isSelected}\r\n                  cardSelectedHeight={cardSelectedHeight}\r\n                  src={card.svg}\r\n                  key={i}\r\n                />\r\n              </CardImgContainer>\r\n              // change the key prop to the name of card\r\n            )\r\n          })}\r\n        </CardContainer>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const myId = getId(state);\r\n  const cards = getMyCards(state);\r\n  const connectedClients = getExistingClients(state);\r\n  const existingTricks = getExistingTricks(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const trumpValue = getTrumpValue(state);\r\n  const trumpTracker = getTrumpTracker(state);\r\n  const validBids = getValidBids(state);\r\n  const canSelectCards = getCanSelectCards(state);\r\n  const numCardsSelected = getNumCardsSelected(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const numCards = cards.length;\r\n\r\n  const changeState = updateState(state);\r\n  return {\r\n    myId,\r\n    cards,\r\n    numCards,\r\n    connectedClients,\r\n    existingTricks,\r\n    appWidth,\r\n    appHeight,\r\n    canSelectCards,\r\n    numCardsSelected,\r\n    currentBid,\r\n    trumpValue,\r\n    trumpTracker,\r\n    validBids,\r\n    changeState,\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  bottom: 40px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* width: 1800px; */\r\n  /* height: ${prop => `${prop.height * 1.8}px`}; */\r\n`;\r\n\r\nconst CardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: ${prop => `${prop.width}px`};\r\n  height: ${prop => `${prop.height}px`};\r\n  transform: ${prop => prop.isSelected && `translateY(${prop.cardSelectedHeight}px);`};\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: ${props => props.isMobile && '80vw'};\r\n  justify-content: ${props => props.isMobile && 'right'};\r\n  overflow: ${props => props.isMobile && 'scroll'};\r\n`;\r\n\r\nconst MyCardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  \r\n  &:not(:first-child) {\r\n    margin-left: -30px;\r\n  }\r\n`;\r\n\r\nconst MyCardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: 50px;\r\n  height: 75px;\r\n`;\r\n\r\nconst CardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  height: ${prop => `${prop.height + Math.abs(prop.cardHoveredHeight)}px`};\r\n\r\n  &:not(:first-child) {\r\n    /* margin-left: ${prop => `-${prop.numCards * 2.3}px`}; */\r\n    margin-left: ${prop => `-${prop.cardWidth * 0.7}px`};\r\n  }\r\n\r\n  &:hover ${CardImg} {\r\n    z-index: 100;\r\n    transform: ${prop => `translateY(${prop.cardHoveredHeight}px);`}\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateCardsInHand,\r\n  setValidBids,\r\n  setCurrentTrickWinner,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  setCanStartRound,\r\n  setPoints,\r\n  toggleBidButtons,\r\n  setClientTurn,\r\n  setTricksPlayed,\r\n  setCurrentBid\r\n})(Game);\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getExistingClientIds,\r\n  getClientTurn,\r\n  getScreenSize,\r\n  getRoom,\r\n  getId,\r\n  getName,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nconst ConnectedClients = (props) => {\r\n  const {\r\n    myId,\r\n    name,\r\n    appHeight,\r\n    appWidth,\r\n    clientIds,\r\n    roomName,\r\n    clients,\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    document.title = name;\r\n  });\r\n\r\n  const renderClientStatus = (id) => {\r\n    const { clientTurn } = props;\r\n    let outputString = '';\r\n    if (clientTurn === id) {\r\n      outputString = 'Waiting for '\r\n    }\r\n    if (id === myId) {\r\n      outputString += `you`;\r\n    } else {\r\n      outputString += clients[id];\r\n    }\r\n    return outputString\r\n  }\r\n\r\n  // TODO: show player levels as well as level\r\n  return (\r\n    <ClientsContainer\r\n      isMobile={appHeight > appWidth}\r\n    >\r\n      <ClientsHeader>PLAYERS ({roomName})</ClientsHeader>\r\n      {clientIds.map(id => {\r\n        return (\r\n          <ClientItem\r\n            key={id}\r\n          >\r\n          {renderClientStatus(id)}\r\n          </ClientItem>\r\n        );\r\n      })}\r\n    </ClientsContainer>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const myId = getId(state);\r\n  const name = getName(state);\r\n  const clients = getExistingClients(state);\r\n  const clientIds = getExistingClientIds(state);\r\n  const roomName = getRoom(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const clientTurn = getClientTurn(state);\r\n\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    myId,\r\n    name,\r\n    clients,\r\n    roomName,\r\n    appWidth,\r\n    appHeight,\r\n    clientTurn,\r\n    clientIds,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  transform: ${props => props.isMobile ? '' : 'translateX(-25%)'};\r\n  top: ${props => props.isMobile ? '145px' : '10px'};\r\n  right: 0;\r\n  padding: 10px 30px 10px 10px;\r\n  margin: 5px;\r\n  width: 150px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\n\r\nexport default connect(mapStateToProps)(ConnectedClients);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameFunction = (props) => {\r\n  return(\r\n    <Button\r\n      id={props.id}\r\n      margin={props.margin}\r\n      onClick={() => props.onClickCb && props.onClickCb()}\r\n      disabled={props.disabled === undefined ? false : props.disabled}\r\n    >\r\n      {props.label}\r\n    </Button>\r\n  );\r\n}\r\n\r\n\r\n// TODO: ensure common button sizing across all buttons (not just auto)\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  font-family: 'Roboto';\r\n  font-weight: 400;\r\n  margin: ${props => props.margin || '7px'};\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px;\r\n  padding: 0 10px;\r\n  height: 25px; \r\n  width: auto;\r\n  background-color: rgba(240,240,240, 1);\r\n  transition: all .1s linear;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: rgba(240,240,240, .8);\r\n  }\r\n`;\r\n\r\nexport default GameFunction;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport { startNewRoundIO } from '../socket/connect';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getMyCards,\r\n  getTrumpValue,\r\n  getPoints,\r\n  getBottomClient,\r\n  getCanStartNewRound,\r\n  getScreenSize,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nimport {\r\n  setCanStartRound\r\n} from '../redux/actions';\r\n\r\nimport RegularButton from './RegularButton';\r\nimport Cards from '../utils/Cards';\r\n\r\nclass DisplayTrump extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bidHistory: [],\r\n      updateComponent: 0\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      currentBid,\r\n      currentBottomClient\r\n    } = this.props;\r\n    const {\r\n      bidHistory,\r\n      updateComponent\r\n    } = this.state;\r\n    const prevBottomClient = prevProps.currentBottomClient;\r\n    const prevBid = prevProps.currentBid;\r\n\r\n    if (JSON.stringify(prevBid) === JSON.stringify(currentBid) &&\r\n      JSON.stringify(currentBottomClient) === JSON.stringify(prevBottomClient)) {\r\n      return;\r\n    }\r\n\r\n    if (!currentBid || currentBid.length === 0) {\r\n      this.setState({\r\n        bidHistory: []\r\n      });\r\n      return;\r\n    }\r\n\r\n    bidHistory.push([currentBottomClient, currentBid]);\r\n\r\n    this.setState({\r\n      bidHistory\r\n    });\r\n\r\n    if (prevBottomClient) {\r\n      setTimeout(() => {\r\n        bidHistory.shift();\r\n        this.setState({\r\n          bidHistory,\r\n          updateComponent: updateComponent + 1\r\n        })\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  getTrumpCardSvgs(currentBid) {\r\n    const {\r\n      trumpValue,\r\n      appWidth,\r\n      appHeight\r\n    } = this.props;\r\n    const Card = new Cards('/cardsSVG/');\r\n    const allSvgs = [];\r\n    let svg;\r\n\r\n    if (currentBid && currentBid.length) {\r\n      if (currentBid[1] === 'J') {\r\n        svg = Card.getSvg(currentBid);\r\n        for (let i = 0; i < 2; i++) {\r\n          allSvgs.push(<SvgContainer isMobile={appHeight > appWidth} src={svg} />);\r\n        }\r\n      } else {\r\n        svg = Card.getSvg([trumpValue, currentBid[1]]);\r\n        for (let i = 0; i < currentBid[0]; i++) {\r\n          allSvgs.push(<SvgContainer isMobile={appHeight > appWidth} src={svg} />);\r\n        }\r\n      }\r\n    }\r\n\r\n    return allSvgs;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      clients,\r\n      appHeight,\r\n      appWidth,\r\n      points,\r\n      canStartNewRound,\r\n      setCanStartRound,\r\n    } = this.props;\r\n    const { bidHistory } = this.state;\r\n    return (\r\n      <ClientsContainer\r\n        isMobile={appHeight > appWidth}\r\n      >\r\n        {canStartNewRound && (\r\n          <RegularButton\r\n            margin='2px 0 7px'\r\n            label='Start Round'\r\n            onClick={() => {\r\n              startNewRoundIO();\r\n              setCanStartRound(false);\r\n            }}\r\n          />\r\n        )}\r\n        <ClientsHeader>\r\n          POINTS: {points}\r\n        </ClientsHeader>\r\n        <ClientsHeader>TRUMP</ClientsHeader>\r\n        {bidHistory.length ? bidHistory.map(bidArr => (\r\n          <ClientItem>\r\n            {clients[bidArr[0]]}: {this.getTrumpCardSvgs(bidArr[1])}\r\n          </ClientItem>\r\n        )) : 'Undetermined'}\r\n      </ClientsContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const clients = getExistingClients(state);\r\n  const currentBottomClient = getBottomClient(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const points = getPoints(state);\r\n  const trumpValue = getTrumpValue(state);\r\n  const canStartNewRound = getCanStartNewRound(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const myCards = getMyCards(state);\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    clients,\r\n    myCards,\r\n    currentBid,\r\n    appWidth,\r\n    appHeight,\r\n    trumpValue,\r\n    canStartNewRound,\r\n    points,\r\n    currentBottomClient,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  box-sizing: border-box;\r\n  transform: ${props => props.isMobile ? '' : 'translateX(25%)'};\r\n  top: ${props => props.isMobile ? '145px' : '10px'};\r\n  left: 0;\r\n  margin: 5px;\r\n  padding: 10px 30px 10px 10px;\r\n  width: ${props => props.isMobile ? '150px' : '200px'};\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\nconst SvgContainer = styled.img`\r\n  margin: 0 5px;\r\n  width: ${props => props.isMobile ? '30px' : '40px'};\r\n  height: ${props => props.isMobile ? '40px' : '60px'};\r\n  \r\n  &:nth-child(n + 2) {\r\n    margin: 0 -20px;\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  setCanStartRound\r\n})(DisplayTrump);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button as RegularButton } from './RegularButton';\r\n\r\nconst BidButton = (props) => {\r\n  return (\r\n    <Button\r\n      onClick={() => props.onClickCb(props.bid)}\r\n    >\r\n      <span>\r\n        {props.label}\r\n      </span>\r\n      <Icon\r\n        color={props.color}\r\n        dangerouslySetInnerHTML={{ __html: props.icon }}\r\n      >\r\n      </Icon>\r\n    </Button>\r\n  );\r\n}\r\n\r\n// TODO: FIX BUTTON ALIGNMENT AND SIZE\r\nconst Button = styled(RegularButton)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5px;\r\n  padding: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  width: 105px;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  padding-left: 5px;\r\n  font-size: 20px;\r\n  color: red;\r\n  filter: ${props => props.color === 'black' && 'grayscale(1)'};\r\n`;\r\n\r\nexport default BidButton;","const Unicodes = {\r\n  H: '&#9825;',\r\n  S: '&#9828;',\r\n  C: '&#9831;',\r\n  D: '&#9826;',\r\n  SJ: '&#127183;',\r\n  BJ: '&#127183;'\r\n}\r\n\r\nexport default Unicodes;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport RegularButton from './RegularButton';\r\nimport GameButton from './GameButton';\r\nimport Unicodes from '../utils/Unicodes';\r\nimport PlayingCards from '../utils/Cards';\r\n\r\nimport {\r\n  makeBidIO,\r\n  returnBottomIO,\r\n  getClientTurnIO,\r\n  getTricksPlayedIO,\r\n  getGeneratedTrumpIO,\r\n  makePlayIO,\r\n  setDoneBidIO\r\n} from '../socket/connect';\r\n\r\nimport {\r\n  setTricksPlayed,\r\n  setClientTurn,\r\n  toggleBidButtons,\r\n  updateCardsInHand,\r\n  toggleCardSelector,\r\n  updateNumCardsSelected,\r\n  setCurrentBid,\r\n} from '../redux/actions';\r\n\r\nimport {\r\n  getName,\r\n  getId,\r\n  getMyCards,\r\n  getValidBids,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getScreenSize,\r\n  getTrumpTracker,\r\n  getCanBidForBottom,\r\n  getClientTurn,\r\n  getNumCardsSelected,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nconst Cards = new PlayingCards();\r\n\r\nconst CallBottomButtons = (props) => {\r\n  const setBottom = (bid) => {\r\n    const {\r\n      myId,\r\n      trumpTracker,\r\n      validBids,\r\n    } = props;\r\n    makeBidIO(bid);\r\n    props.setCurrentBid(myId, bid);\r\n    Cards.updateBid(bid, trumpTracker, validBids);\r\n  }\r\n\r\n  const setDoneBid = () => {\r\n    const {\r\n      cards,\r\n      trumpTracker\r\n    } = props;\r\n    setDoneBidIO();\r\n    props.toggleBidButtons(false);\r\n    getClientTurnIO(enableTurnsListener);\r\n    getTricksPlayedIO(enableTricksListener);\r\n    getGeneratedTrumpIO(enableTrumpListener);\r\n    updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  const enableTrumpListener = (clientId, trumpCard) => {\r\n    props.setCurrentBid(clientId, trumpCard);\r\n  }\r\n\r\n  const enableTurnsListener = (clientId) => {\r\n    const {\r\n      myId,\r\n      setClientTurn,\r\n      toggleCardSelector\r\n    } = props;\r\n    setClientTurn(clientId);\r\n    console.log('enableTurnsListener', `${clientId}'s turn`);\r\n    if (myId === clientId) {\r\n      toggleCardSelector(true);\r\n    } else {\r\n      toggleCardSelector(false);\r\n    }\r\n  }\r\n\r\n  const enableTricksListener = (tricksPlayed) => {\r\n    props.setTricksPlayed(tricksPlayed);\r\n  }\r\n\r\n  const emitReturnBottom = () => {\r\n    const {\r\n      cards,\r\n      trumpTracker,\r\n      updateCardsInHand,\r\n      toggleCardSelector,\r\n      updateNumCardsSelected\r\n    } = props;\r\n    let bottomCards = [];\r\n    let cardsInHand = [];\r\n    cards.forEach(card => {\r\n      if (card.isSelected) {\r\n        bottomCards.push(card.card);\r\n      } else {\r\n        cardsInHand.push(card);\r\n      }\r\n    })\r\n\r\n    console.log('cards sent back for bottom', bottomCards);\r\n    updateCardsInHand(cardsInHand, trumpTracker);\r\n    toggleCardSelector(false);\r\n    updateNumCardsSelected(0);\r\n    returnBottomIO(bottomCards);\r\n  }\r\n\r\n  const emitTrickValidator = (isValidPlay, cardsInHand) => {\r\n    const {\r\n      cards,\r\n      updateCardsInHand,\r\n      trumpTracker,\r\n      toggleCardSelector,\r\n      trumpValue,\r\n      currentBid,\r\n      updateNumCardsSelected\r\n    } = props;\r\n    if (isValidPlay === 'valid') {\r\n    updateCardsInHand(cardsInHand, trumpTracker);\r\n      toggleCardSelector(false);\r\n      updateNumCardsSelected(0);\r\n    } else if (isValidPlay === 'invalid') {\r\n      alert('Invalid Trick');\r\n      updateCardsInHand(cards.map(cardObj => {\r\n        cardObj.isSelected = false;\r\n        return cardObj;\r\n      }), trumpTracker);\r\n    } else if (isValidPlay === 'badThrow') {\r\n      let newCards = [];\r\n      alert('Bad Throw');\r\n      cardsInHand.forEach(card => {\r\n        console.log(card, card.card);\r\n        Cards.insertCard(newCards, card.card, trumpValue, currentBid[1]);\r\n      });\r\n      updateCardsInHand(newCards, trumpTracker);\r\n    }\r\n  }\r\n\r\n  const emitTrick = () => {\r\n    const { cards } = props;\r\n    let selectedCards = [];\r\n    let cardsInHand = [];\r\n    cards.forEach(card => {\r\n      if (card.isSelected) {\r\n        selectedCards.push(card.card);\r\n      } else {\r\n        cardsInHand.push(card);\r\n      }\r\n    })\r\n    makePlayIO(selectedCards, cardsInHand, emitTrickValidator);\r\n  }\r\n\r\n  // returns the array of buttons to be rendered\r\n  const getAvailableBidButtons = () => {\r\n    const { validBids } = props;\r\n    // validBids: [numOfCards, valueOfCards]\r\n    // e.g. if I have 2 (2 of spades) -> [2, 'S'];\r\n    // e.g. no trump: ['S', 'J'] or ['B', 'J']\r\n    let bidArray = [];\r\n    validBids.forEach(bid => {\r\n      let buttonObject = {\r\n        rawData: bid\r\n      };\r\n      if (bid[1] === 'J') { // have 2 jokers to call no trump\r\n        bidArray.push(Object.assign({}, buttonObject, {\r\n          renderData: bid[0] === 'S' ? ['No Trump', 'SJ'] : ['No Trump', 'BJ'],\r\n          color: bid[0] === 'S' ? 'black' : 'red'\r\n        }));\r\n      } else {\r\n        bidArray.push(Object.assign({}, buttonObject, {\r\n          renderData: [bid[0], bid[1]],\r\n          color: (bid[1] === 'S' || bid[1] === 'C') ? 'black' : 'red'\r\n        }));\r\n      }\r\n    })\r\n    return bidArray;\r\n  }\r\n\r\n\r\n  const renderBidButtons = () => (\r\n    <BidButtonContainer\r\n      isMobile={props.appHeight > props.appWidth}\r\n    >\r\n      {props.canBidForBottom && getAvailableBidButtons().map((buttonObject, i) => {\r\n        return (\r\n          <GameButton\r\n            bid={buttonObject.rawData}\r\n            label={buttonObject.renderData[0]}\r\n            icon={Unicodes[buttonObject.renderData[1]] || ''}\r\n            color={buttonObject.color}\r\n            onClickCb={setBottom}\r\n            key={i}\r\n          />\r\n        )\r\n      })}\r\n    </BidButtonContainer>\r\n  )\r\n\r\n  const renderFinishButtons = () => (\r\n    <span>\r\n      {props.canBidForBottom &&\r\n        <RegularButton\r\n          id=\"finishBidBtn\"\r\n          label=\"Finish Bid\"\r\n          onClickCb={setDoneBid}\r\n        />}\r\n      {/* TODO: set num cards selected to 8 later */}\r\n      {props.numCardsSelected === 8 && props.cards.length > 25 &&\r\n        <RegularButton\r\n          id=\"finishBottomBtn\"\r\n          label=\"Finish Bottom\"\r\n          onClickCb={emitReturnBottom}\r\n        />}\r\n      {props.clientTurnId === props.myId && !!props.numCardsSelected &&\r\n        <RegularButton\r\n          id=\"finishTrickBtn\"\r\n          label=\"Finish Trick\"\r\n          onClickCb={emitTrick}\r\n        />\r\n      }\r\n    </span>\r\n  )\r\n\r\n  return (\r\n    <AllButtonsContainer>\r\n      {renderBidButtons()}\r\n      {renderFinishButtons()}\r\n    </AllButtonsContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const name = getName(state);\r\n  const myId = getId(state);\r\n  const validBids = getValidBids(state);\r\n  const trumpValue = getTrumpValue(state);\r\n  const trumpTracker = getTrumpTracker(state);\r\n  const canBidForBottom = getCanBidForBottom(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const clientTurnId = getClientTurn(state);\r\n  const cards = getMyCards(state);\r\n  const numCardsSelected = getNumCardsSelected(state);\r\n\r\n  const numUpdateStates = updateState(state);\r\n  return {\r\n    myId,\r\n    name,\r\n    cards,\r\n    appWidth,\r\n    appHeight,\r\n    validBids,\r\n    clientTurnId,\r\n    currentBid,\r\n    trumpValue,\r\n    canBidForBottom,\r\n    trumpTracker,\r\n    numCardsSelected,\r\n    numUpdateStates\r\n  };\r\n}\r\n\r\nconst AllButtonsContainer = styled.div`\r\n  z-index: 100;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst BidButtonContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-wrap: ${props => props.isMobile && '1'};\r\n  max-width: ${props => props.isMobile && '80%'};\r\n  margin: 10px;\r\n  height: 40px;\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  toggleBidButtons,\r\n  updateCardsInHand,\r\n  toggleCardSelector,\r\n  setTricksPlayed,\r\n  setClientTurn,\r\n  setCurrentBid,\r\n  updateNumCardsSelected\r\n})(CallBottomButtons);","import React from 'react';\r\nimport styled, { keyframes, css } from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Cards from '../utils/Cards';\r\n\r\nimport {\r\n  getId,\r\n  getExistingClients,\r\n  getExistingClientIds,\r\n  getClientTurn,\r\n  getExistingTricks,\r\n  getScreenSize,\r\n  getCurrentTrickWinner,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\n// TODO: clear all info when trick round is done (determined by listener)\r\n// make position fixed for the 4 players\r\nconst PlayerInfo = (props) => {\r\n  const {\r\n    myId,\r\n    clients,\r\n    clientIds,\r\n    appWidth,\r\n    appHeight,\r\n    existingTricks,\r\n    currentClientTurn,\r\n    currentTrickWinner\r\n  } = props;\r\n  const filteredClientIds = [];\r\n  const myIndex = clientIds.indexOf(myId);\r\n  for (let i = 1; i < 4; i++) {\r\n    filteredClientIds.push(clientIds[(myIndex + i) % 4]);\r\n  }\r\n\r\n\r\n  const player1 = (clientName, clientId, cardSvg) => {\r\n    return (\r\n      <Container1\r\n        curWinner={currentTrickWinner}\r\n        clientTurn={currentClientTurn}\r\n        myId={clientId}\r\n        appWidth={appWidth}\r\n      >\r\n        {filteredClientIds[0] ?\r\n          <>\r\n            <Name>\r\n              {clientName}:\r\n            </Name>\r\n            {cardSvg}\r\n          </> : 'Waiting for Player...'}\r\n      </Container1>\r\n    )\r\n  }\r\n\r\n  const player2 = (clientName, clientId, cardSvg) => {\r\n    return (\r\n      <Container2\r\n        curWinner={currentTrickWinner}\r\n        clientTurn={currentClientTurn}\r\n        myId={clientId}\r\n        appWidth={appWidth}\r\n      >\r\n        {filteredClientIds[1] ?\r\n          <>\r\n            <Name>\r\n              {clientName}:\r\n            </Name>\r\n            {cardSvg}\r\n          </> : 'Waiting for Player...'}\r\n      </Container2>\r\n    )\r\n  }\r\n\r\n  const player3 = (clientName, clientId, cardSvg) => {\r\n    return (\r\n      <Container3\r\n        curWinner={currentTrickWinner}\r\n        clientTurn={currentClientTurn}\r\n        myId={clientId}\r\n        appWidth={appWidth}\r\n      >\r\n        {filteredClientIds[2] ?\r\n          <>\r\n            <Name>\r\n              {clientName}:\r\n            </Name>\r\n            {cardSvg}\r\n          </> : 'Waiting for Player...'}\r\n      </Container3>\r\n    )\r\n  }\r\n\r\n  const renderPlayerInfo = (index) => {\r\n    const Card = new Cards('/cardsSVG/');\r\n    const clientId = filteredClientIds[index];\r\n    const clientName = clients[clientId];\r\n    const clientCards = existingTricks[clientId];\r\n    const allSvgs = [];\r\n    let svg;\r\n\r\n    if (clientCards && clientCards.length > 0) {\r\n      clientCards.forEach(card => {\r\n        svg = Card.getSvg(card);\r\n        allSvgs.push(<SvgContainer isMobile={appHeight > appWidth} src={svg} />)\r\n      })\r\n    }\r\n\r\n    return (index === 0) ? player1(clientName, clientId, allSvgs) :\r\n      (index === 1) ? player2(clientName, clientId, allSvgs) :\r\n        player3(clientName, clientId, allSvgs);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PlayerSignal\r\n        myId={myId}\r\n        clientTurn={currentClientTurn}\r\n      >\r\n        Go\r\n      </PlayerSignal>\r\n      {(appHeight > appWidth) ? (\r\n        <Wrapper>\r\n          {renderPlayerInfo(0)}\r\n          {renderPlayerInfo(1)}\r\n          {renderPlayerInfo(2)}\r\n        </Wrapper>\r\n      ) : (\r\n        <>\r\n          {renderPlayerInfo(0)}\r\n          {renderPlayerInfo(1)}\r\n          {renderPlayerInfo(2)}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const myId = getId(state);\r\n  const clients = getExistingClients(state);\r\n  const clientIds = getExistingClientIds(state);\r\n  const existingTricks = getExistingTricks(state);\r\n  const currentClientTurn = getClientTurn(state);\r\n  const currentTrickWinner = getCurrentTrickWinner(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const updateNumState = updateState(state);\r\n  return {\r\n    myId,\r\n    clients,\r\n    clientIds,\r\n    currentTrickWinner,\r\n    currentClientTurn,\r\n    existingTricks,\r\n    appWidth,\r\n    appHeight,\r\n    updateNumState\r\n  }\r\n}\r\n\r\nconst flash = keyframes`\r\n  0% {\r\n    background-color: rgba(0,0,0, .30);\r\n  }\r\n\r\n  50% {\r\n    background-color: rgba(0,0,0, .10);\r\n  }\r\n  \r\n  100% {\r\n    background-color: rgba(0,0,0, .30);\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  top: 0;\r\n  height: 130px;\r\n  width: 100%;\r\n\r\n  div {\r\n    position: unset;\r\n    width: 25%;\r\n    min-width: auto;\r\n    height: 120px;\r\n    transform: none;\r\n    margin: 5px;\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  width: auto;\r\n  min-width: 200px;\r\n  height: 90px;\r\n  padding: 10px 30px 10px 10px;\r\n  border-radius: 5px;\r\n  font-size: 24px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n`;\r\n\r\nconst SvgContainer = styled.img`\r\n  margin: 0 5px;\r\n  width: ${props => props.isMobile ? '30px' : '60px'};\r\n  height: ${props => props.isMobile ? '50px' : '90px'};\r\n  \r\n  &:nth-child(n + 2) {\r\n    margin: 0 -20px;\r\n  }\r\n`;\r\n\r\nconst Name = styled.span`\r\n  margin-right: 30px;\r\n`;\r\n\r\nconst Container1 = styled(Container)`\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\r\n  margin-left: 30px;\r\n  ${props => (props.curWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\r\n`;\r\n\r\nconst Container2 = styled(Container)`\r\n  top: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\r\n  margin-top: 30px;\r\n  ${props => (props.curWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\r\n`;\r\n\r\nconst Container3 = styled(Container)`\r\n  top: 50%;\r\n  right: 0;\r\n  transform: translateY(-50%);\r\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\r\n  margin-right: 30px;\r\n  ${props => (props.curWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\r\n`;\r\n\r\nconst PlayerSignal = styled.div`\r\n  z-index: 0;\r\n  position: absolute;\r\n  display: ${props => props.myId === props.clientTurn ? 'flex' : 'none'};\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: transparent;\r\n  color: rgba(255, 255, 255, .1);\r\n  font-size: 20rem;\r\n`;\r\n\r\n\r\nexport default connect(mapStateToProps)(PlayerInfo);","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Game from './components/Game';\r\nimport ConnectedClients from './components/ConnectedClients';\r\nimport DisplayTrump from \"./components/DisplayTrump\";\r\nimport ButtonsContainer from './components/ButtonsContainer';\r\nimport RegularButton from './components/RegularButton';\r\nimport PlayerInfo from \"./components/PlayerInfo\";\r\n\r\nimport TractorSvg from './tractor_logo.svg'\r\n\r\nimport {\r\n  connectToSocketIO,\r\n  getConnectedClientsIO,\r\n} from './socket/connect';\r\n\r\nimport {\r\n  getName,\r\n  getScreenSize,\r\n  updateState\r\n} from './redux/selectors';\r\n\r\nimport {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n} from './redux/actions';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      connectionStatus: false,\r\n      isConnecting: false,\r\n      iconWidth: 150,\r\n      inputWidth: 100\r\n    };\r\n\r\n    window.addEventListener('resize', this.setAppSizes.bind(this));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setAppSizes();\r\n  }\r\n\r\n  setAppSizes() {\r\n    let screenWidth = window.innerWidth;\r\n    let screenHeight = window.innerHeight;\r\n    let appWidth, appHeight, iconWidth, inputWidth;\r\n\r\n    if (screenWidth >= 2560 && screenHeight >= 1440) {\r\n      appWidth = 2560;\r\n      appHeight = 1440;\r\n      iconWidth = 250;\r\n      inputWidth = 200;\r\n    } else if (screenWidth >= 1920 && screenHeight >= 1080) {\r\n      appWidth = 1920;\r\n      appHeight = 1080;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    } else if (screenWidth < screenHeight) {\r\n      // mobile\r\n      appWidth = screenWidth;\r\n      appHeight = screenHeight;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    } else {\r\n      appWidth = 1280;\r\n      appHeight = 720;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    }\r\n\r\n    this.props.setScreenSize(appWidth, appHeight);\r\n    this.setState({\r\n      iconWidth,\r\n      inputWidth\r\n    })\r\n  }\r\n\r\n  setConnectionStatus(connectionStatus, id, name, roomName) {\r\n    this.setState({ connectionStatus });\r\n    if (connectionStatus) {\r\n      getConnectedClientsIO(this.setConnectedClients.bind(this));\r\n      this.props.setUser(name, id, roomName);\r\n    }\r\n  }\r\n\r\n  setConnectedClients(sockets) {\r\n    this.props.updateClientList(sockets);\r\n  }\r\n\r\n  joinRoomValidator(isConnected) {\r\n    if(!isConnected) {\r\n      alert('Room is full.');\r\n      this.setState({\r\n        connectionStatus: false\r\n      });\r\n    }\r\n    this.setState({\r\n      isConnecting: false\r\n    });\r\n  }\r\n\r\n  connect(ev) {\r\n    ev.preventDefault();\r\n    let name = this.nameRef.value;\r\n    let room = this.roomRef.value;\r\n    if (!name) {\r\n      alert('enter a name');\r\n      return;\r\n    }\r\n    if (!room) {\r\n      alert('enter a room');\r\n      return;\r\n    }\r\n\r\n    if (name.length > 7) {\r\n      name = name.slice(0, 7);\r\n    }\r\n\r\n    this.setState({\r\n      isConnecting: true\r\n    });\r\n\r\n    connectToSocketIO(this.setConnectionStatus.bind(this), this.joinRoomValidator.bind(this), name, room.toLowerCase());\r\n  }\r\n\r\n  renderPreConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    const {\r\n      iconWidth,\r\n      inputWidth,\r\n      isConnecting\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <Title>\r\n          {/* Tractor */}\r\n          <Logo\r\n            iconWidth={iconWidth}\r\n            src={TractorSvg}\r\n            draggable={false}\r\n          />\r\n        </Title>\r\n        <Form\r\n          onSubmit={(ev) => { this.connect(ev) }}\r\n        >\r\n          <Input\r\n            autoFocus\r\n            placeholder=\"Enter a name!\"\r\n            inputWidth={inputWidth}\r\n            ref={(nameRef) => { this.nameRef = nameRef }}\r\n          />\r\n          <Input\r\n            placeholder=\"Enter a room code!\"\r\n            inputWidth={inputWidth}\r\n            ref={(roomRef) => { this.roomRef = roomRef }}\r\n          />\r\n          <RegularButton\r\n            label=\"Join\"\r\n            disabled={isConnecting}\r\n          />\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\n  renderPostConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <PlayerInfo />\r\n        <DisplayTrump />\r\n        <ConnectedClients />\r\n        <ButtonsContainer />\r\n        <Game />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { connectionStatus } = this.state;\r\n    return connectionStatus ? this.renderPostConnection() : this.renderPreConnection();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const name = getName(state);\r\n  const numStateChanges = updateState(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  return {\r\n    name,\r\n    appWidth,\r\n    appHeight,\r\n    numStateChanges,\r\n  };\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${props => `${props.width}px`};\r\n  height: ${props => `${props.height}px`};\r\n  background-color: green;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 5px;\r\n  padding: 0;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  margin: 5px 15px;\r\n  padding: 7px 10px;\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px 2px 0 0;\r\n  width: ${prop => `${prop.inputWidth}px`};\r\n  height: 15px;\r\n  background-color: darkgreen;\r\n  color: rgba(255, 255, 255, .9);\r\n  transition: all .3s cubic-bezier(0.65, 0, 0.35, 1);\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, .7);\r\n  }\r\n\r\n  &:focus, &:active {\r\n    border-bottom: rgba(255, 255, 255, .7) 2px solid;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: ${prop => `${prop.iconWidth}px`};\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n})(App);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const currState = {\r\n  appWidth: 1920,\r\n  appHeight: 1080,\r\n  socket: { connected: false },\r\n  clients: {},\r\n  clientIds: [],\r\n  name: '',\r\n  id: '',\r\n  cards: [],\r\n  trump: '2',\r\n  room: '',\r\n  currentBid: null,\r\n  currentTrickWinner: 'nobody',\r\n  currentBottomClient: null,\r\n  currentClientTurn: null,\r\n  existingTricks: {},\r\n  trumpTracker: { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 },\r\n  validBids: [],\r\n  points: 0,\r\n  // canSelectCards & numCardsSelected is for\r\n  // both returning bottom and playing cards on your turn\r\n  canSelectCards: false,\r\n  numCardsSelected: 0,\r\n  // canBidForBottom is only true beginning of each round\r\n  canBidForBottom: false,\r\n  // TODO: add everyone elses play - should be by socketId index\r\n  // [[cards by player0], [cards by player1]]\r\n  cardsPlayed: [],\r\n  canStartNewRound: false,\r\n  numStateUpdated: 0\r\n}\r\n\r\nexport default (state = currState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SCREEN_SIZE':\r\n      return Object.assign({}, state, {\r\n        appWidth: action.payload.width,\r\n        appHeight: action.payload.height\r\n      })\r\n    case 'UPDATE_CLIENT_LIST':\r\n      return Object.assign({}, state, {\r\n        clients: action.payload.clients,\r\n        clientIds: action.payload.clientIds,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_USER':\r\n      console.log(action.payload)\r\n      return Object.assign({}, state, {\r\n        name: action.payload.name,\r\n        room: action.payload.room,\r\n        id: action.payload.id\r\n      })\r\n    case 'SET_DECLARER':\r\n      console.log(action.payload);\r\n      return Object.assign({}, state, {\r\n        currentBottomClient: state.clients[action.payload]\r\n      })\r\n    case 'UPDATE_MY_HAND':\r\n      return Object.assign({}, state, {\r\n        cards: action.payload.cards,\r\n        trumpTracker: action.payload.trumpTracker,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_VALID_BIDS':\r\n      return Object.assign({}, state, {\r\n        validBids: action.payload,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_TRUMP_VALUE':\r\n      return Object.assign({}, state, {\r\n        trump: action.payload\r\n      })\r\n    case 'SET_CURRENT_BID':\r\n      return Object.assign({}, state, {\r\n        currentBid: action.payload.bid,\r\n        currentBottomClient: action.payload.socketId,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'CAN_SELECT_CARDS':\r\n      return Object.assign({}, state, {\r\n        canSelectCards: action.payload\r\n      })\r\n    case 'UPDATE_NUM_CARDS_SELECTED':\r\n      return Object.assign({}, state, {\r\n        numCardsSelected: action.payload\r\n      })\r\n    case 'TOGGLE_BID_BUTTONS':\r\n      return Object.assign({}, state, {\r\n        canBidForBottom: action.payload\r\n      })\r\n    case 'SET_CLIENT_TURN':\r\n      return Object.assign({}, state, {\r\n        currentClientTurn: action.payload\r\n      })\r\n    case 'SET_ALL_TRICKS':\r\n      return Object.assign({}, state, {\r\n        existingTricks: action.payload,\r\n        numStateUpdated: state.numStateUpdated + 1\r\n      })\r\n    case 'SET_POINTS':\r\n      return Object.assign({}, state, {\r\n        points: action.payload,\r\n      })\r\n    case 'SET_CURRENT_TRICK_WINNER':\r\n      return Object.assign({}, state, {\r\n        currentTrickWinner: action.payload\r\n      })\r\n    case 'TOGGLE_NEW_ROUND':\r\n      return Object.assign({}, state, {\r\n        canStartNewRound: action.payload\r\n      })\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n      <App />\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
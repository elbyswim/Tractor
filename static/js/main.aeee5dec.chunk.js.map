{"version":3,"sources":["tractor_logo.svg","utils/Cards.js","socket/connect.js","redux/selectors.js","redux/actions.js","components/Game.js","components/ConnectedClients.js","components/DisplayTrump.js","components/RegularButton.js","components/GameButton.js","utils/Unicodes.js","components/ButtonsContainer.js","components/PlayerInfo.js","App.js","serviceWorker.ts","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","Cards","path","suits","jokers","cards","suitOrder","valueOrder","this","Set","arr","has","valid_card","valid_suit","isValidCard","console","log","card","trump","newCard","trumpValue","trumpSuit","cardObject","isSelected","svg","getSvg","length","i","splice","push","diamonds","clubs","spades","hearts","trumpD","trumpS","trumpH","trumpC","sortedCards","forEach","cardObj","cardVal","concat","trumpTracker","validBids","currentBid","bid","_","isEqual","socket","connectToSocketIO","getStatusCb","validator","name","room","io","setStatusCb","on","status","id","getConnectionStatus","emit","setSocketIdIO","getScreenSize","store","appWidth","appHeight","getExistingClients","clients","getExistingClientIds","clientIds","updateState","numStateUpdated","getName","getId","getMyCards","getValidBids","getCurrentBid","getTrumpValue","getTrumpTracker","getNumCardsSelected","numCardsSelected","getExistingTricks","existingTricks","getClientTurn","currentClientTurn","updateCardsInHand","type","payload","toggleCardSelector","canSelectCards","updateNumCardsSelected","num","toggleBidButtons","canBid","setClientTurn","clientId","setTricksPlayed","tricks","PlayingCards","Game","props","state","cardWidth","cardHeight","cardSelectedHeight","cardHoveredHeight","numCardsForBottom","setStage1Listeners","setCardSize","setTrumpValueCb","setCardsCb","setNewBidCb","setBottomCardsCb","getFinalBidCb","getPointsCb","getCurrentWinnerCb","setTrumpValue","bind","setCards","updateBidStatus","socketId","receiveBottomCards","sortHand","getPoints","pointsFromNonBottom","getCurrentWinner","setCurrentTrickWinner","points","setPoints","setState","setCurrentBid","setValidBids","insertCard","newTrump","bottomCards","bottomCard","cardIndex","window","alert","toggleSingleCard","myId","map","receiveBid","numCards","Container","height","CardContainer","getExistingTrickSvg","MyCardImgContainer","zIndex","MyCardImg","draggable","width","src","key","CardImgContainer","onClick","toggleCards","CardImg","Component","styled","div","prop","img","span","Math","abs","connect","connectedClients","getCanSelectCards","changeState","ClientsContainer","ul","ClientsHeader","ClientItem","li","roomName","getRoom","clientTurn","numStateChanges","useEffect","document","title","outputString","renderClientStatus","DisplayTrump","bidHistory","updateComponent","prevProps","currentBottomClient","prevBottomClient","prevBid","JSON","stringify","setTimeout","shift","Card","allSvgs","SvgContainer","bidArr","getTrumpCardSvgs","getBottomClient","Button","button","GameFunction","onClickCb","disabled","undefined","label","RegularButton","Icon","color","BidButton","dangerouslySetInnerHTML","__html","icon","Unicodes","H","S","C","D","SJ","BJ","AllButtonsContainer","BidButtonContainer","canBidForBottom","getCanBidForBottom","clientTurnId","numUpdateStates","setBottom","makeBidIO","updateBid","setDoneBid","getClientTurnCb","getTricksPlayedCb","getGeneratedTrumpCb","enableTurnsListener","enableTricksListener","enableTrumpListener","trumpCard","tricksPlayed","emitReturnBottom","bottom","cardsInHand","emitTrickValidator","isValidPlay","newCards","emitTrick","selectedCards","trick","makePlayIO","bidArray","buttonObject","rawData","Object","assign","renderData","getAvailableBidButtons","GameButton","flash","keyframes","Name","Container1","currentTrickWinner","css","Container2","Container3","PlayerSignal","getCurrentTrickWinner","updateNumState","filteredClientIds","myIndex","indexOf","renderPlayerInfo","index","clientName","clientCards","cardSvg","curWinner","player1","player2","player3","App","connectionStatus","isConnecting","iconWidth","inputWidth","addEventListener","setAppSizes","screenWidth","innerWidth","screenHeight","innerHeight","setScreenSize","setClientsCb","setConnectedClients","setUser","sockets","updateClientList","isConnected","ev","preventDefault","nameRef","value","roomRef","slice","setConnectionStatus","joinRoomValidator","Title","Logo","TractorSvg","Form","onSubmit","Input","autoFocus","placeholder","ref","ButtonsContainer","renderPostConnection","renderPreConnection","h1","form","input","keys","Boolean","location","hostname","match","currState","connected","cardsPlayed","createStore","action","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aeee5dec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tractor_logo.e6e625d4.svg\";","import _ from 'underscore';\r\n\r\nexport default class Cards {\r\n  // TODO: DEPLOYMENT CARDS PATH IS DIFFERENT\r\n  // path = 'https://justinli0423.github.io/Tractor/cardsSVG/'; // local\r\n  path = '/Tractor/cardsSVG/'; //deployment\r\n  suits = [];\r\n  jokers = [];\r\n  cards = [];\r\n  // want a black, red, black, red order\r\n  suitOrder = { 'S': 0, 'D': 1, 'C': 2, 'H': 3 };\r\n  // order already works for NT and spades trump\r\n  valueOrder = {\r\n    'A': 0,\r\n    'K': 1,\r\n    'Q': 2,\r\n    'J': 3,\r\n    '10': 4,\r\n    '9': 5,\r\n    '8': 6,\r\n    '7': 7,\r\n    '6': 8,\r\n    '5': 9,\r\n    '4': 10,\r\n    '3': 11,\r\n    '2': 12\r\n  }\r\n\r\n  constructor(path) {\r\n    // this.path = path;\r\n    this.suits = new Set(['H', 'C', 'S', 'D']); //hearts, clubs, spades, diamonds\r\n    this.jokers = new Set(['S', 'B']); // Small, big\r\n    this.cards = new Set(['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']);\r\n  }\r\n\r\n  isValidCard(arr) {\r\n    if (arr[1] === 'J') {\r\n      // if it is a joker,\r\n      return this.jokers.has(arr[0]);\r\n    }\r\n\r\n    let valid_card = this.cards.has(arr[0]);\r\n    let valid_suit = this.suits.has(arr[1]);\r\n\r\n    return valid_card && valid_suit;\r\n  }\r\n\r\n  getSvg(arr) {\r\n    if (!this.isValidCard(arr)) {\r\n      console.log(`Invalid card: ${arr}`);\r\n    }\r\n    return `${this.path}${arr[0]}${arr[1]}.svg`;\r\n  }\r\n\r\n  isTrump(card) {\r\n    return card[0] === this.trump;\r\n  }\r\n\r\n  insertCard(cards, newCard, trumpValue, trumpSuit) {\r\n    const cardObject = {\r\n      card: newCard,\r\n      isSelected: false,\r\n      svg: this.getSvg(newCard)\r\n    }\r\n    if (trumpSuit) {\r\n      // diamonds are trump -> want diamonds first -> move spades to back\r\n      if (trumpSuit === 'D') {\r\n        this.suitOrder['S'] = 4;\r\n        // clubs are trump -> switch clubs and spades\r\n      } else if (trumpSuit === 'C') {\r\n        this.suitOrder['C'] = 0;\r\n        this.suitOrder['S'] = 2;\r\n        // hearts are trump -> move hearts to front\r\n      } else if (trumpSuit === 'H') {\r\n        this.suitOrder['H'] = -1;\r\n      }\r\n    }\r\n    if (cards.length > 0) {\r\n      let i = 0;\r\n      // card is a joker\r\n      if (newCard[0] === 'S' || newCard[1] === 'J') {\r\n        while (i < cards.length && cards[i].card[0] === 'B' && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // card value is trump\r\n      } else if (newCard[0] === trumpValue) {\r\n        // Jokers come first\r\n        while (i < cards.length && cards[i].card[1] === 'J') {\r\n          i++;\r\n        }\r\n        // insert based on order\r\n        while (i < cards.length && cards[i].card[0] === trumpValue && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        // card is neither a joker nor a \"trump value trump\"\r\n      } else {\r\n        while (i < cards.length && (cards[i].card[1] === 'J' || cards[i].card[0] === trumpValue)) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] < this.suitOrder[newCard[1]]) {\r\n          i++;\r\n        }\r\n        while (i < cards.length && this.suitOrder[cards[i].card[1]] === this.suitOrder[newCard[1]] && this.valueOrder[cards[i].card[0]] < this.valueOrder[newCard[0]]) {\r\n          i++;\r\n        }\r\n      }\r\n      cards.splice(i, 0, cardObject);\r\n    } else {\r\n      cards.push(cardObject);\r\n    }\r\n  }\r\n  \r\n  // This is for after receiving trump\r\n  // direction:\r\n    // 1: increasing (3....A)\r\n    // 0: decreasing (A....3)\r\n  sortHand(cards, trumpValue, trumpSuit, direction = 0) {\r\n    let diamonds = [];\r\n    let clubs = [];\r\n    let spades = [];\r\n    let hearts = [];\r\n    let jokers = [];\r\n    let trumpD = [];\r\n    let trumpS = [];\r\n    let trumpH = [];\r\n    let trumpC = [];\r\n\r\n    let sortedCards = [];\r\n\r\n    if (trumpSuit === 'S' || trumpSuit === 'J') {\r\n      // if direction changed, sort otherway\r\n      // otherwise nothing to do for no trump or spades\r\n      return cards;\r\n    }\r\n\r\n    // only get here if there is a trump suit change\r\n    cards.forEach((cardObj) => {\r\n      let cardVal = cardObj.card;\r\n      if (cardVal[1] === 'J') {\r\n        jokers.push(cardObj);\r\n      }\r\n      if (cardVal[0] === trumpValue) {\r\n        if (cardVal[1] === 'S') {\r\n          trumpS.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          trumpC.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          trumpH.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          trumpD.push(cardObj);\r\n        }\r\n      }\r\n      else {\r\n        if (cardVal[1] === 'S') {\r\n          spades.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'C') {\r\n          clubs.push(cardObj);      \r\n        }\r\n        if (cardVal[1] === 'H') {\r\n          hearts.push(cardObj);\r\n        }\r\n        if (cardVal[1] === 'D') {\r\n          diamonds.push(cardObj);\r\n        }\r\n      }\r\n    });\r\n\r\n    sortedCards = sortedCards.concat(jokers);\r\n    if (trumpSuit === 'C') {\r\n      sortedCards = sortedCards.concat(trumpC, trumpH, trumpS, trumpD, clubs, hearts, spades, diamonds);\r\n    }\r\n    if (trumpSuit === 'H') {\r\n      sortedCards = sortedCards.concat(trumpH, trumpS, trumpD, trumpC, hearts, spades, diamonds, clubs);\r\n    }\r\n    if (trumpSuit === 'D') {\r\n      sortedCards = sortedCards.concat(trumpD, trumpC, trumpH, trumpS, diamonds, clubs, hearts, spades);\r\n    }\r\n    console.log('sortedCards', sortedCards);\r\n    return sortedCards;\r\n  }\r\n\r\n  // TODO\r\n  newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue) {\r\n    if (newCard[1] === 'J') {\r\n      trumpTracker[newCard[0] + 'J'] += 1\r\n      if (trumpTracker[newCard[0] + 'J'] === 2) {\r\n        if (!currentBid || currentBid[1] !== 'J' || (currentBid[0] === 'S' && newCard[0] === 'B')) {\r\n          validBids.push(newCard)\r\n        }\r\n      }\r\n    } else if (newCard[0] === trumpValue) {\r\n      trumpTracker[newCard[1]] += 1;\r\n      if (!currentBid || (currentBid[0] === 1 && trumpTracker[newCard[1]] === 2)) {\r\n        validBids.push([trumpTracker[newCard[1]], newCard[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  updateBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    if (bid[0] === 1) {\r\n      if (trumpTracker[bid[1]] === 2) {\r\n        validBids.push([2, bid[1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  receiveBid(bid, trumpTracker, validBids) {\r\n    validBids.splice(0, validBids.length)\r\n    \r\n    if (_.isEqual(bid, ['B', 'J'])) {\r\n      return;\r\n    } \r\n    \r\n    if (trumpTracker['BJ'] === 2) {\r\n      validBids.push(['B', 'J'])\r\n    }\r\n\r\n    if (_.isEqual(bid, ['S', 'J'])) {\r\n      return;\r\n    }\r\n\r\n    if (trumpTracker['SJ'] === 2) {\r\n      validBids.push(['S', 'J'])\r\n    }\r\n\r\n    if (bid[0] === 2) {\r\n      return;\r\n    } \r\n\r\n    if (trumpTracker['S'] === 2) {\r\n      validBids.push([2, 'S'])\r\n    }\r\n    \r\n    if (trumpTracker['D'] === 2) {\r\n      validBids.push([2, 'D'])\r\n    }\r\n    \r\n    if (trumpTracker['C'] === 2) {\r\n      validBids.push([2, 'C'])\r\n    }\r\n    \r\n    if (trumpTracker['H'] === 2) {\r\n      validBids.push([2, 'H'])\r\n    }\r\n  }\r\n};\r\n","import io from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:8000\";\r\n\r\nvar socket = null;\r\n\r\nexport function connectToSocketIO(getStatusCb, validator, name, room) {\r\n  // socket = io(ENDPOINT);\r\n  // if (!socket.connected) {\r\n    socket = io('tractorserver.herokuapp.com');\r\n  // }\r\n  getConnectionStatus(getStatusCb, name, room);\r\n  setSocketIdIO(name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT EMITTERS ------------------\r\nexport function makePlayIO(trick, cardsInHand, validator) {\r\n  socket.emit('clientPlay', trick, cardsInHand, validator); \r\n}\r\n\r\nexport function makeBidIO(bid) {\r\n  socket.emit('newBid', bid);\r\n}\r\n\r\nexport function setDoneBidIO() {\r\n  socket.emit('doneBid');\r\n}\r\n\r\n// returning the 8 cards you don't want\r\nexport function returnBottomIO(bottom) {\r\n  console.log(socket.id, 'returning bottom', bottom);\r\n  socket.emit('newBottom', bottom);\r\n}\r\n\r\nfunction setSocketIdIO(name, room, validator) {\r\n  socket.emit('setSocketId', name, room, validator);\r\n}\r\n\r\n// ------------------ EVENT LISTENERS ------------------\r\nexport function getPointsIO(getPointsCb) {\r\n  socket.on('opponentPoints', (pointsFromNonBottom) => getPointsCb(pointsFromNonBottom));\r\n}\r\n\r\nexport function getGeneratedTrumpIO(getGeneratedTrumpCb) {\r\n  socket.on('generateTrump', (clientId, card) => getGeneratedTrumpCb(clientId, card));\r\n}\r\n\r\nexport function getCurrentWinnerIO(getCurrentWinnerCb) {\r\n  socket.on('currentWinner', (clientId) => getCurrentWinnerCb(clientId));\r\n}\r\n\r\nexport function getFinalBidIO (getFinalBidCb) {\r\n  socket.on('bidWon', getFinalBidCb);\r\n}\r\n\r\nexport function getClientTurnIO(getClientTurnCb) {\r\n  socket.on('nextClient', (clientId) => {\r\n    getClientTurnCb(clientId);\r\n  });\r\n}\r\n\r\nexport function getTricksPlayedIO(getTricksPlayedCb) {\r\n  socket.on('cardsPlayed', (tricks) => {\r\n    console.log('Received current tricks', tricks);\r\n    getTricksPlayedCb(tricks);\r\n  });\r\n}\r\n\r\nexport function getBottomIO(setBottomCardsCb) {\r\n  socket.on('originalBottom', (cards) => setBottomCardsCb(cards));\r\n}\r\n\r\nexport function getConnectedClientsIO(setClientsCb) {\r\n  socket.on('newClientConnection', setClientsCb);\r\n}\r\n\r\nexport function getCardsIO(setCardsCb) {\r\n  socket.on('dealCard', setCardsCb);\r\n}\r\n\r\nexport function getNewBidIO(setNewBidCb) {\r\n  socket.on('setNewBid', (socketId, bid) => setNewBidCb(socketId, bid));\r\n}\r\n\r\nexport function getTrumpValueIO(setTrumpValueCb) {\r\n  socket.on('setTrumpValue', trump => setTrumpValueCb(trump));\r\n}\r\n\r\nfunction getConnectionStatus(setStatusCb, name, room) {\r\n  socket.on('connectionStatus', status => {\r\n    console.log('connected');\r\n    setStatusCb(status, socket.id, name, room);\r\n  });\r\n}\r\n","export const getScreenSize = store => ({\n  appWidth: store.appWidth,\n  appHeight: store.appHeight\n});\n\nexport const getRoom = store => store.room;\n\nexport const getExistingClients = store => store.clients;\n\nexport const getExistingClientIds = store => store.clientIds;\n\nexport const updateState = store => store.numStateUpdated;\n\nexport const getName = store => store.name;\n\nexport const getId = store => store.id;\n\nexport const getBottomClient = store => store.currentBottomClient;\n\nexport const getMyCards = store => store.cards;\n\nexport const getValidBids = store => store.validBids;\n\nexport const getCurrentBid = store => store.currentBid;\n\nexport const getTrumpValue = store => store.trump;\n\nexport const getTrumpTracker = store => store.trumpTracker;\n\nexport const getCanSelectCards = store => store.canSelectCards;\n\nexport const getNumCardsSelected = store => store.numCardsSelected;\n\nexport const getCanBidForBottom = store => store.canBidForBottom;\n\nexport const getExistingTricks = store => store.existingTricks;\n\nexport const getClientTurn = store => store.currentClientTurn;\n\nexport const getPoints = store => store.points;\n\nexport const getCurrentTrickWinner = store => store.getCurrentTrickWinner;\n","export const setScreenSize = (width, height) => ({\n  type: 'SET_SCREEN_SIZE',\n  payload: {\n    width,\n    height\n  }\n})\n\nexport const updateClientList = (clients) => ({\n  type: 'UPDATE_CLIENT_LIST',\n  payload: {\n    clients,\n    clientIds: Object.keys(clients)\n  }\n});\n\nexport const setUser = (name, id, room) => ({\n  type: 'SET_USER',\n  payload: {\n    name,\n    id,\n    room,\n  }\n});\n\nexport const setCurrentTrickWinner = (id) => ({\n  type: 'SET_CURRENT_TRICK_WINNER',\n  payload: id\n});\n\nexport const setBottomClient = (socketId) => ({\n  type: 'SET_DECLARER',\n  payload: socketId\n})\n\nexport const updateCardsInHand = (cards, trumpTracker) => ({\n  type: 'UPDATE_MY_HAND',\n  payload: {\n    trumpTracker,\n    cards\n  }\n})\n\nexport const setValidBids = (validBids) => ({\n  type: 'SET_VALID_BIDS',\n  payload: validBids\n})\n\nexport const setCurrentBid = (socketId, bid) => ({\n  type: 'SET_CURRENT_BID',\n  payload: {\n    socketId,\n    bid\n  }\n})\n\nexport const setTrumpValue = (trump) => ({\n  type: 'SET_TRUMP_VALUE',\n  payload: trump\n})\n\nexport const toggleCardSelector = (canSelectCards) => ({\n  type: 'CAN_SELECT_CARDS',\n  payload: canSelectCards\n})\n\nexport const updateNumCardsSelected = (num) => ({\n  type: 'UPDATE_NUM_CARDS_SELECTED',\n  payload: num\n})\n\nexport const toggleBidButtons = (canBid) => ({\n  type: 'TOGGLE_BID_BUTTONS',\n  payload: canBid\n})\n\nexport const setClientTurn = (clientId) => ({\n  type: 'SET_CLIENT_TURN',\n  payload: clientId\n})\n\nexport const setTricksPlayed = (tricks) => ({\n  type: 'SET_ALL_TRICKS',\n  payload: tricks\n})\n\nexport const setPoints = (points) => ({\n  type: 'SET_POINTS',\n  payload: points\n})","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport PlayingCards from '../utils/Cards';\r\nimport {\r\n  getCardsIO,\r\n  getNewBidIO,\r\n  getTrumpValueIO,\r\n  getPointsIO,\r\n  getCurrentWinnerIO,\r\n  getFinalBidIO,\r\n  getBottomIO\r\n} from \"../socket/connect\";\r\n\r\nimport {\r\n  getId,\r\n  getMyCards,\r\n  updateState,\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getTrumpTracker,\r\n  getCanSelectCards,\r\n  getNumCardsSelected,\r\n  getExistingTricks,\r\n  getScreenSize,\r\n  getValidBids\r\n} from '../redux/selectors';\r\n\r\nimport {\r\n  updateCardsInHand,\r\n  setCurrentBid,\r\n  setClientTurn,\r\n  setTricksPlayed,\r\n  setPoints,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  toggleBidButtons,\r\n  setCurrentTrickWinner,\r\n  setValidBids\r\n} from '../redux/actions';\r\n\r\nconst Cards = new PlayingCards('/cardsSVG/');\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cardWidth: 120,\r\n      cardHeight: 168,\r\n      cardSelectedHeight: -30,\r\n      cardHoveredHeight: -50,\r\n      numCardsForBottom: 0\r\n    };\r\n  }\r\n  // all listeners required pre-game goes here\r\n  componentDidMount() {\r\n    this.setStage1Listeners();\r\n    this.setCardSize();\r\n  }\r\n\r\n  setStage1Listeners() {\r\n    getTrumpValueIO(this.props.setTrumpValue.bind(this));\r\n    getCardsIO(this.setCards.bind(this));\r\n    getNewBidIO(this.updateBidStatus.bind(this));\r\n    getBottomIO(this.receiveBottomCards.bind(this));\r\n    getFinalBidIO(this.sortHand.bind(this));\r\n    getPointsIO(this.getPoints.bind(this));\r\n    getCurrentWinnerIO(this.getCurrentWinner.bind(this));\r\n    this.setCardSize();\r\n  }\r\n\r\n  getCurrentWinner(clientId) {\r\n    this.props.setCurrentTrickWinner(clientId);\r\n  }\r\n\r\n  sortHand() {\r\n    const {\r\n      cards,\r\n      currentBid,\r\n      trumpTracker,\r\n      trumpValue\r\n    } = this.props;\r\n    this.props.updateCardsInHand(Cards.sortHand(cards, trumpValue, currentBid[1]), trumpTracker);\r\n  }\r\n\r\n  getPoints(points) {\r\n    this.props.setPoints(points);\r\n  }\r\n\r\n  setCardSize() {\r\n    const {\r\n      appWidth\r\n    } = this.props;\r\n    let cardWidth, cardHeight, cardHoveredHeight, cardSelectedHeight;\r\n\r\n    if (appWidth === 2560) {\r\n      cardWidth = 204;\r\n      cardHeight = 286;\r\n      cardSelectedHeight = -70;\r\n      cardHoveredHeight = -90;\r\n    }\r\n    if (appWidth === 1920) {\r\n      cardWidth = 120;\r\n      cardHeight = 168;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n    if (appWidth === 1280) {\r\n      cardWidth = 110;\r\n      cardHeight = 148;\r\n      cardSelectedHeight = -30;\r\n      cardHoveredHeight = -50;\r\n    }\r\n\r\n    this.setState({\r\n      cardWidth,\r\n      cardHeight,\r\n      cardHoveredHeight,\r\n      cardSelectedHeight\r\n    });\r\n  }\r\n\r\n  setCards(newCard) {\r\n    const {\r\n      cards,\r\n      setCurrentBid,\r\n      setClientTurn,\r\n      setTricksPlayed,\r\n      setPoints,\r\n      toggleBidButtons,\r\n      setValidBids,\r\n      updateCardsInHand\r\n    } = this.props;\r\n\r\n    if (cards.length === 0) {\r\n      setCurrentBid('', null); // clears trump\r\n      updateCardsInHand(cards, { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 });\r\n      setValidBids([]);\r\n      setClientTurn(null);\r\n      setTricksPlayed({});\r\n      setPoints(0);\r\n      toggleBidButtons(true);\r\n      console.log('resetting round');\r\n    }\r\n\r\n    let {\r\n      trumpValue,\r\n      trumpTracker,\r\n      validBids,\r\n      currentBid,\r\n    } = this.props;\r\n\r\n    Cards.insertCard(cards, newCard, trumpValue, currentBid);\r\n    Cards.newTrump(trumpTracker, validBids, newCard, currentBid, trumpValue);\r\n    setValidBids(validBids);\r\n    updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  receiveBottomCards(bottomCards) {\r\n    bottomCards.forEach(bottomCard => {\r\n      this.setCards(bottomCard);\r\n    });\r\n    this.props.toggleCardSelector(true);\r\n    this.props.toggleBidButtons(false);\r\n  }\r\n\r\n  toggleSingleCard(cardIndex) {\r\n    const {\r\n      cards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n\r\n    if (!isSelected) {\r\n      this.props.updateNumCardsSelected(numCardsSelected + 1);\r\n    } else {\r\n      this.props.updateNumCardsSelected(numCardsSelected - 1);\r\n    }\r\n    cards[cardIndex].isSelected = !isSelected;\r\n  }\r\n\r\n  toggleCards(cardIndex) {\r\n    const {\r\n      cards,\r\n      trumpTracker,\r\n      canSelectCards,\r\n      numCardsSelected\r\n    } = this.props;\r\n    let isSelected = cards[cardIndex].isSelected;\r\n    console.log('canToggleCards', canSelectCards);\r\n\r\n    if (!canSelectCards) {\r\n      return;\r\n    }\r\n\r\n    // numBottom\r\n    if (cards.length > 25 && !isSelected && numCardsSelected === 8) {\r\n      window.alert('Maximum cards for bottom selected');\r\n      return;\r\n    }\r\n\r\n    this.toggleSingleCard(cardIndex);\r\n    this.props.updateCardsInHand(cards, trumpTracker);\r\n  }\r\n\r\n  getExistingTrickSvg() {\r\n    const {\r\n      myId,\r\n      existingTricks\r\n    } = this.props;\r\n    if (!existingTricks || !existingTricks[myId]) {\r\n      return [];\r\n    }\r\n    \r\n    return existingTricks[myId].map((card) => Cards.getSvg(card));\r\n  }\r\n\r\n  updateBidStatus(socketId, bid) {\r\n    const {\r\n      trumpTracker,\r\n      validBids,\r\n    } = this.props;\r\n    Cards.receiveBid(bid, trumpTracker, validBids);\r\n    this.props.setCurrentBid(socketId, bid);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      cards,\r\n      numCards,\r\n    } = this.props;\r\n    const {\r\n      cardWidth,\r\n      cardHeight,\r\n      cardSelectedHeight,\r\n      cardHoveredHeight\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        height={cardHeight}\r\n      >\r\n        <CardContainer>\r\n          {this.getExistingTrickSvg().map((card, i) => {\r\n              return (\r\n                <MyCardImgContainer\r\n                  zIndex={i}\r\n                >\r\n                  <MyCardImg\r\n                    draggable={false}\r\n                    width={cardWidth}\r\n                    height={cardHeight}\r\n                    src={card}\r\n                    key={i}\r\n                  />\r\n                </MyCardImgContainer>\r\n              )\r\n            })\r\n          }\r\n        </CardContainer>\r\n        <CardContainer>\r\n          {cards.map((card, i) => {\r\n            return (\r\n              <CardImgContainer\r\n                height={cardHeight}\r\n                onClick={() => { this.toggleCards(i) }}\r\n                numCards={numCards}\r\n                cardWidth={cardWidth}\r\n                cardHoveredHeight={cardHoveredHeight}\r\n                zIndex={i}\r\n              >\r\n                <CardImg\r\n                  // TODO: enable drag and drop custom sorting later?\r\n                  draggable={false}\r\n                  width={cardWidth}\r\n                  height={cardHeight}\r\n                  isSelected={card.isSelected}\r\n                  cardSelectedHeight={cardSelectedHeight}\r\n                  src={card.svg}\r\n                  key={i}\r\n                />\r\n              </CardImgContainer>\r\n              // change the key prop to the name of card\r\n            )\r\n          })}\r\n        </CardContainer>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const myId = getId(state);\r\n  const cards = getMyCards(state);\r\n  const connectedClients = getExistingClients(state);\r\n  const existingTricks = getExistingTricks(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const trumpValue = getTrumpValue(state);\r\n  const trumpTracker = getTrumpTracker(state);\r\n  const validBids = getValidBids(state);\r\n  const canSelectCards = getCanSelectCards(state);\r\n  const numCardsSelected = getNumCardsSelected(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  const numCards = cards.length;\r\n\r\n  const changeState = updateState(state);\r\n  return {\r\n    myId,\r\n    cards,\r\n    numCards,\r\n    connectedClients,\r\n    existingTricks,\r\n    appWidth,\r\n    appHeight,\r\n    canSelectCards,\r\n    numCardsSelected,\r\n    currentBid,\r\n    trumpValue,\r\n    trumpTracker,\r\n    validBids,\r\n    changeState,\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  display: flex;\r\n  bottom: 40px;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* width: 1800px; */\r\n  /* height: ${prop => `${prop.height * 1.8}px`}; */\r\n`;\r\n\r\nconst CardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: ${prop => `${prop.width}px`};\r\n  height: ${prop => `${prop.height}px`};\r\n  transform: ${prop => prop.isSelected && `translateY(${prop.cardSelectedHeight}px);`};\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst MyCardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  \r\n  &:not(:first-child) {\r\n    margin-left: -30px;\r\n  }\r\n`;\r\n\r\nconst MyCardImg = styled.img`\r\n  flex-shrink: 0;\r\n  width: 50px;\r\n  height: 75px;\r\n`;\r\n\r\nconst CardImgContainer = styled.span`\r\n  z-index: ${prop => prop.zIndex};\r\n  display: flex;\r\n  align-items: flex-end;\r\n  height: ${prop => `${prop.height + Math.abs(prop.cardHoveredHeight)}px`};\r\n\r\n  &:not(:first-child) {\r\n    /* margin-left: ${prop => `-${prop.numCards * 2.3}px`}; */\r\n    margin-left: ${prop => `-${prop.cardWidth * 0.7}px`};\r\n  }\r\n\r\n  &:hover ${CardImg} {\r\n    z-index: 100;\r\n    transform: ${prop => `translateY(${prop.cardHoveredHeight}px);`}\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateCardsInHand,\r\n  setValidBids,\r\n  setCurrentTrickWinner,\r\n  setTrumpValue,\r\n  updateNumCardsSelected,\r\n  toggleCardSelector,\r\n  setPoints,\r\n  toggleBidButtons,\r\n  setClientTurn,\r\n  setTricksPlayed,\r\n  setCurrentBid\r\n})(Game);\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getExistingClientIds,\r\n  getClientTurn,\r\n  getRoom,\r\n  getId,\r\n  getName,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nconst ConnectedClients = (props) => {\r\n  const {\r\n    myId,\r\n    name,\r\n    clientIds,\r\n    roomName,\r\n    clients,\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    document.title = name;\r\n  });\r\n\r\n  const renderClientStatus = (id) => {\r\n    const { clientTurn } = props;\r\n    let outputString = '';\r\n    if (clientTurn === id) {\r\n      outputString = 'Waiting for '\r\n    }\r\n    if (id === myId) {\r\n      outputString += `you`;\r\n    } else {\r\n      outputString += clients[id];\r\n    }\r\n    return outputString\r\n  }\r\n\r\n  // TODO: show player levels as well as level\r\n  return (\r\n    <ClientsContainer>\r\n      <ClientsHeader>PLAYERS ({roomName})</ClientsHeader>\r\n      {clientIds.map(id => {\r\n        return (\r\n          <ClientItem\r\n            key={id}\r\n          >\r\n          {renderClientStatus(id)}\r\n          </ClientItem>\r\n        );\r\n      })}\r\n    </ClientsContainer>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const myId = getId(state);\r\n  const name = getName(state);\r\n  const clients = getExistingClients(state);\r\n  const clientIds = getExistingClientIds(state);\r\n  const roomName = getRoom(state);\r\n  const clientTurn = getClientTurn(state);\r\n\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    myId,\r\n    name,\r\n    clients,\r\n    roomName,\r\n    clientTurn,\r\n    clientIds,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  transform: translateX(-25%);\r\n  top: 10px;\r\n  right: 0;\r\n  padding: 10px 30px 10px 10px;\r\n  width: 150px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\n\r\nexport default connect(mapStateToProps)(ConnectedClients);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  getExistingClients,\r\n  getCurrentBid,\r\n  getTrumpValue,\r\n  getPoints,\r\n  getBottomClient,\r\n  updateState\r\n} from '../redux/selectors';\r\n\r\nimport Cards from '../utils/Cards';\r\n\r\nclass DisplayTrump extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bidHistory: [],\r\n      updateComponent: 0\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      currentBid,\r\n      currentBottomClient\r\n    } = this.props;\r\n    const {\r\n      bidHistory,\r\n      updateComponent\r\n    } = this.state;\r\n    const prevBottomClient = prevProps.currentBottomClient;\r\n    const prevBid = prevProps.currentBid;\r\n\r\n    if (JSON.stringify(prevBid) === JSON.stringify(currentBid) &&\r\n      JSON.stringify(currentBottomClient) === JSON.stringify(prevBottomClient)) {\r\n      return;\r\n    }\r\n\r\n    if (!currentBid || currentBid.length === 0) {\r\n      this.setState({\r\n        bidHistory: []\r\n      });\r\n      return;\r\n    }\r\n\r\n    bidHistory.push([currentBottomClient, currentBid]);\r\n\r\n    this.setState({\r\n      bidHistory\r\n    });\r\n\r\n    if (prevBottomClient) {\r\n      setTimeout(() => {\r\n        bidHistory.shift();\r\n        this.setState({\r\n          bidHistory,\r\n          updateComponent: updateComponent + 1\r\n        })\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  getTrumpCardSvgs(currentBid) {\r\n    const { trumpValue } = this.props;\r\n    const Card = new Cards('/cardsSVG/');\r\n    const allSvgs = [];\r\n    let svg;\r\n\r\n    if (currentBid && currentBid.length) {\r\n      if (currentBid[1] === 'J') {\r\n        svg = Card.getSvg(currentBid);\r\n        for (let i = 0; i < 2; i++) {\r\n          allSvgs.push(<SvgContainer src={svg} />);\r\n        }\r\n      } else {\r\n        svg = Card.getSvg([trumpValue, currentBid[1]]);\r\n        for (let i = 0; i < currentBid[0]; i++) {\r\n          allSvgs.push(<SvgContainer src={svg} />);\r\n        }\r\n      }\r\n    }\r\n\r\n    return allSvgs;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      clients,\r\n      points\r\n    } = this.props;\r\n    const { bidHistory } = this.state;\r\n    return (\r\n      <ClientsContainer>\r\n        <ClientsHeader>POINTS: {points}</ClientsHeader>\r\n        <ClientsHeader>TRUMP</ClientsHeader>\r\n        {bidHistory.length ? bidHistory.map(bidArr => (\r\n          <ClientItem>\r\n            {clients[bidArr[0]]}: {this.getTrumpCardSvgs(bidArr[1])}\r\n          </ClientItem>\r\n        )) : 'Undetermined'}\r\n      </ClientsContainer>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const clients = getExistingClients(state);\r\n  const currentBottomClient = getBottomClient(state);\r\n  const currentBid = getCurrentBid(state);\r\n  const points = getPoints(state);\r\n  const trumpValue = getTrumpValue(state);\r\n\r\n  const numStateChanges = updateState(state);\r\n  return {\r\n    clients,\r\n    currentBid,\r\n    trumpValue,\r\n    points,\r\n    currentBottomClient,\r\n    numStateChanges\r\n  };\r\n}\r\n\r\nconst ClientsContainer = styled.ul`\r\n  position: fixed;\r\n  transform: translateX(25%);\r\n  top: 10px;\r\n  left: 0;\r\n  padding: 10px 30px 10px 10px;\r\n  width: 150px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0,0,0, .20);\r\n  color: rgba(255, 255, 255, .6);\r\n  font-size: 18px;\r\n  list-style: none;\r\n`;\r\n\r\nconst ClientsHeader = styled.div`\r\n  padding-bottom: 5px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst ClientItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  padding: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  text-indent: -2px;\r\n\r\n  &::before {\r\n    content: \"🚜 \";\r\n  }\r\n`;\r\n\r\nconst SvgContainer = styled.img`\r\n  margin: 0 5px;\r\n  width: 40px;\r\n  height: 60px;\r\n  \r\n  &:nth-child(n + 2) {\r\n    margin: 0 -20px;\r\n  }\r\n`;\r\n\r\nexport default connect(mapStateToProps)(DisplayTrump);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameFunction = (props) => {\r\n  return(\r\n    <Button\r\n      id={props.id}\r\n      onClick={() => props.onClickCb && props.onClickCb()}\r\n      disabled={props.disabled === undefined ? false : props.disabled}\r\n    >\r\n      {props.label}\r\n    </Button>\r\n  );\r\n}\r\n\r\n\r\n// TODO: ensure common button sizing across all buttons (not just auto)\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  font-family: 'Roboto';\r\n  font-weight: 400;\r\n  margin: 7px;\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px;\r\n  padding: 0 10px;\r\n  height: 25px; \r\n  width: auto;\r\n  background-color: rgba(240,240,240, 1);\r\n  transition: all .1s linear;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: rgba(240,240,240, .8);\r\n  }\r\n`;\r\n\r\nexport default GameFunction;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Button as RegularButton } from './RegularButton';\r\n\r\nconst BidButton = (props) => {\r\n  return (\r\n    <Button\r\n      onClick={() => props.onClickCb(props.bid)}\r\n    >\r\n      <span>\r\n        {props.label}\r\n      </span>\r\n      <Icon\r\n        color={props.color}\r\n        dangerouslySetInnerHTML={{ __html: props.icon }}\r\n      >\r\n      </Icon>\r\n    </Button>\r\n  );\r\n}\r\n\r\n// TODO: FIX BUTTON ALIGNMENT AND SIZE\r\nconst Button = styled(RegularButton)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5px;\r\n  padding: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  width: 105px;\r\n`;\r\n\r\nconst Icon = styled.span`\r\n  padding-left: 5px;\r\n  font-size: 20px;\r\n  color: red;\r\n  filter: ${props => props.color === 'black' && 'grayscale(1)'};\r\n`;\r\n\r\nexport default BidButton;","const Unicodes = {\r\n  H: '&#9825;',\r\n  S: '&#9828;',\r\n  C: '&#9831;',\r\n  D: '&#9826;',\r\n  SJ: '&#127183;',\r\n  BJ: '&#127183;'\r\n}\r\n\r\nexport default Unicodes;","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport RegularButton from './RegularButton';\nimport GameButton from './GameButton';\nimport Unicodes from '../utils/Unicodes';\nimport PlayingCards from '../utils/Cards';\n\nimport {\n  makeBidIO,\n  returnBottomIO,\n  getClientTurnIO,\n  getTricksPlayedIO,\n  getGeneratedTrumpIO,\n  makePlayIO,\n  setDoneBidIO\n} from '../socket/connect';\n\nimport {\n  setTricksPlayed,\n  setClientTurn,\n  toggleBidButtons,\n  updateCardsInHand,\n  toggleCardSelector,\n  updateNumCardsSelected,\n} from '../redux/actions';\n\nimport {\n  getName,\n  getId,\n  getMyCards,\n  getValidBids,\n  getCurrentBid,\n  getTrumpValue,\n  getTrumpTracker,\n  getCanBidForBottom,\n  getClientTurn,\n  getNumCardsSelected,\n  updateState\n} from '../redux/selectors';\n\nconst Cards = new PlayingCards();\n\nconst CallBottomButtons = (props) => {\n  const setBottom = (bid) => {\n    const {\n      myId,\n      trumpTracker,\n      validBids,\n    } = props;\n    makeBidIO(bid);\n    props.setCurrentBid(myId, bid);\n    Cards.updateBid(bid, trumpTracker, validBids);\n  }\n\n  const setDoneBid = () => {\n    const {\n      cards,\n      trumpTracker\n    } = props;\n    setDoneBidIO();\n    props.toggleBidButtons(false);\n    getClientTurnIO(enableTurnsListener);\n    getTricksPlayedIO(enableTricksListener);\n    getGeneratedTrumpIO(enableTrumpListener);\n    updateCardsInHand(cards, trumpTracker);\n  }\n\n  const enableTrumpListener = (clientId, trumpCard) => {\n    props.setCurrentBid(clientId, trumpCard);\n  }\n\n  const enableTurnsListener = (clientId) => {\n    const {\n      myId,\n      setClientTurn,\n      toggleCardSelector\n    } = props;\n    setClientTurn(clientId);\n    console.log('enableTurnsListener', `${clientId}'s turn`);\n    if (myId === clientId) {\n      toggleCardSelector(true);\n    } else {\n      toggleCardSelector(false);\n    }\n  }\n\n  const enableTricksListener = (tricksPlayed) => {\n    props.setTricksPlayed(tricksPlayed);\n  }\n\n  const emitReturnBottom = () => {\n    const {\n      cards,\n      trumpTracker,\n      updateCardsInHand,\n      toggleCardSelector,\n      updateNumCardsSelected\n    } = props;\n    let bottomCards = [];\n    let cardsInHand = [];\n    cards.forEach(card => {\n      if (card.isSelected) {\n        bottomCards.push(card.card);\n      } else {\n        cardsInHand.push(card);\n      }\n    })\n\n    console.log('cards sent back for bottom', bottomCards);\n    updateCardsInHand(cardsInHand, trumpTracker);\n    toggleCardSelector(false);\n    updateNumCardsSelected(0);\n    returnBottomIO(bottomCards);\n  }\n\n  const emitTrickValidator = (isValidPlay, cardsInHand) => {\n    const {\n      cards,\n      updateCardsInHand,\n      trumpTracker,\n      toggleCardSelector,\n      trumpValue,\n      currentBid,\n      updateNumCardsSelected\n    } = props;\n    if (isValidPlay === 'valid') {\n    updateCardsInHand(cardsInHand, trumpTracker);\n      toggleCardSelector(false);\n      updateNumCardsSelected(0);\n    } else if (isValidPlay === 'invalid') {\n      alert('Invalid Trick');\n      updateCardsInHand(cards.map(cardObj => {\n        cardObj.isSelected = false;\n        return cardObj;\n      }), trumpTracker);\n    } else if (isValidPlay === 'badThrow') {\n      let newCards = [];\n      alert('Bad Throw');\n      cardsInHand.forEach(card => {\n        console.log(card, card.card);\n        Cards.insertCard(newCards, card.card, trumpValue, currentBid[1]);\n      });\n      updateCardsInHand(newCards, trumpTracker);\n    }\n  }\n\n  const emitTrick = () => {\n    const { cards } = props;\n    let selectedCards = [];\n    let cardsInHand = [];\n    cards.forEach(card => {\n      if (card.isSelected) {\n        selectedCards.push(card.card);\n      } else {\n        cardsInHand.push(card);\n      }\n    })\n    makePlayIO(selectedCards, cardsInHand, emitTrickValidator);\n  }\n\n  // returns the array of buttons to be rendered\n  const getAvailableBidButtons = () => {\n    const { validBids } = props;\n    // validBids: [numOfCards, valueOfCards]\n    // e.g. if I have 2 (2 of spades) -> [2, 'S'];\n    // e.g. no trump: ['S', 'J'] or ['B', 'J']\n    let bidArray = [];\n    validBids.forEach(bid => {\n      let buttonObject = {\n        rawData: bid\n      };\n      if (bid[1] === 'J') { // have 2 jokers to call no trump\n        bidArray.push(Object.assign({}, buttonObject, {\n          renderData: bid[0] === 'S' ? ['No Trump', 'SJ'] : ['No Trump', 'BJ'],\n          color: bid[0] === 'S' ? 'black' : 'red'\n        }));\n      } else {\n        bidArray.push(Object.assign({}, buttonObject, {\n          renderData: [bid[0], bid[1]],\n          color: (bid[1] === 'S' || bid[1] === 'C') ? 'black' : 'red'\n        }));\n      }\n    })\n    return bidArray;\n  }\n\n\n  const renderBidButtons = () => (\n    <BidButtonContainer>\n      {props.canBidForBottom && getAvailableBidButtons().map((buttonObject, i) => {\n        return (\n          <GameButton\n            bid={buttonObject.rawData}\n            label={buttonObject.renderData[0]}\n            icon={Unicodes[buttonObject.renderData[1]] || ''}\n            color={buttonObject.color}\n            onClickCb={setBottom}\n            key={i}\n          />\n        )\n      })}\n    </BidButtonContainer>\n  )\n\n  const renderFinishButtons = () => (\n    <span>\n      {props.canBidForBottom &&\n        <RegularButton\n          id=\"finishBidBtn\"\n          label=\"Finish Bid\"\n          onClickCb={setDoneBid}\n        />}\n      {/* TODO: set num cards selected to 8 later */}\n      {props.numCardsSelected === 8 && props.cards.length > 25 &&\n        <RegularButton\n          id=\"finishBottomBtn\"\n          label=\"Finish Bottom\"\n          onClickCb={emitReturnBottom}\n        />}\n      {props.clientTurnId === props.myId && !!props.numCardsSelected &&\n        <RegularButton\n          id=\"finishTrickBtn\"\n          label=\"Finish Trick\"\n          onClickCb={emitTrick}\n        />\n      }\n    </span>\n  )\n\n  return (\n    <AllButtonsContainer>\n      {renderBidButtons()}\n      {renderFinishButtons()}\n    </AllButtonsContainer>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  const name = getName(state);\n  const myId = getId(state);\n  const validBids = getValidBids(state);\n  const trumpValue = getTrumpValue(state);\n  const trumpTracker = getTrumpTracker(state);\n  const canBidForBottom = getCanBidForBottom(state);\n  const currentBid = getCurrentBid(state);\n  const clientTurnId = getClientTurn(state);\n  const cards = getMyCards(state);\n  const numCardsSelected = getNumCardsSelected(state);\n\n  const numUpdateStates = updateState(state);\n  return {\n    myId,\n    name,\n    cards,\n    validBids,\n    clientTurnId,\n    currentBid,\n    trumpValue,\n    canBidForBottom,\n    trumpTracker,\n    numCardsSelected,\n    numUpdateStates\n  };\n}\n\nconst AllButtonsContainer = styled.div`\n  z-index: 100;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nconst BidButtonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px;\n  height: 40px;\n`;\n\nexport default connect(mapStateToProps, {\n  toggleBidButtons,\n  updateCardsInHand,\n  toggleCardSelector,\n  setTricksPlayed,\n  setClientTurn,\n  updateNumCardsSelected\n})(CallBottomButtons);","import React from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport Cards from '../utils/Cards';\n\nimport {\n  getId,\n  getExistingClients,\n  getExistingClientIds,\n  getClientTurn,\n  getExistingTricks,\n  getScreenSize,\n  getCurrentTrickWinner,\n  updateState\n} from '../redux/selectors';\n\n// TODO: clear all info when trick round is done (determined by listener)\n// make position fixed for the 4 players\nconst PlayerInfo = (props) => {\n  const {\n    myId,\n    clients,\n    clientIds,\n    appWidth,\n    existingTricks,\n    currentClientTurn,\n    currentTrickWinner\n  } = props;\n  const filteredClientIds = [];\n  const myIndex = clientIds.indexOf(myId);\n  for (let i = 1; i < 4; i++) {\n    filteredClientIds.push(clientIds[(myIndex + i) % 4]);\n  }\n\n\n  const player1 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container1\n        curWinner={currentTrickWinner}\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[0] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container1>\n    )\n  }\n\n  const player2 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container2\n        curWinner={currentTrickWinner}\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[1] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container2>\n    )\n  }\n\n  const player3 = (clientName, clientId, cardSvg) => {\n    return (\n      <Container3\n        curWinner={currentTrickWinner}\n        clientTurn={currentClientTurn}\n        myId={clientId}\n        appWidth={appWidth}\n      >\n        {filteredClientIds[2] ?\n          <>\n            <Name>\n              {clientName}:\n            </Name>\n            {cardSvg}\n          </> : 'Waiting for Player...'}\n      </Container3>\n    )\n  }\n\n  const renderPlayerInfo = (index) => {\n    const Card = new Cards('/cardsSVG/');\n    const clientId = filteredClientIds[index];\n    const clientName = clients[clientId];\n    const clientCards = existingTricks[clientId];\n    const allSvgs = [];\n    let svg;\n\n    if (clientCards && clientCards.length > 0) {\n      clientCards.forEach(card => {\n        svg = Card.getSvg(card);\n        allSvgs.push(<SvgContainer src={svg} />)\n      })\n    }\n\n    return (index === 0) ? player1(clientName, clientId, allSvgs) :\n      (index === 1) ? player2(clientName, clientId, allSvgs) :\n        player3(clientName, clientId, allSvgs);\n  }\n\n  return (\n    <>\n      <PlayerSignal\n        myId={myId}\n        clientTurn={currentClientTurn}\n      >\n        Go\n      </PlayerSignal>\n      {renderPlayerInfo(0)}\n      {renderPlayerInfo(1)}\n      {renderPlayerInfo(2)}\n    </>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  const myId = getId(state);\n  const clients = getExistingClients(state);\n  const clientIds = getExistingClientIds(state);\n  const existingTricks = getExistingTricks(state);\n  const currentClientTurn = getClientTurn(state);\n  const currentTrickWinner = getCurrentTrickWinner(state);\n  const { appWidth, appHeight } = getScreenSize(state);\n  const updateNumState = updateState(state);\n  return {\n    myId,\n    clients,\n    clientIds,\n    currentTrickWinner,\n    currentClientTurn,\n    existingTricks,\n    appWidth,\n    appHeight,\n    updateNumState\n  }\n}\n\nconst flash = keyframes`\n  from {\n    rgba(0,0,0, .30);\n  }\n\n  to {\n    rgba(0,0,0, .10);\n  }\n`;\n\nconst Container = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: auto;\n  min-width: 200px;\n  height: 90px;\n  padding: 10px 30px 10px 10px;\n  border-radius: 5px;\n  font-size: 24px;\n  background-color: rgba(0,0,0, .20);\n  color: rgba(255, 255, 255, .6);\n`;\n\nconst SvgContainer = styled.img`\n  margin: 0 5px;\n  width: 60px;\n  height: 90px;\n  \n  &:nth-child(n + 2) {\n    margin: 0 -20px;\n  }\n`;\n\nconst Name = styled.span`\n  margin-right: 30px;\n`;\n\nconst Container1 = styled(Container)`\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-left: 30px;\n  ${props => (props.currentTrickWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\n`;\n\nconst Container2 = styled(Container)`\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-top: 30px;\n  ${props => (props.currentTrickWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\n`;\n\nconst Container3 = styled(Container)`\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n  border: ${props => (props.clientTurn && props.myId === props.clientTurn) ? '2px solid red' : '2px solid transparent'};\n  margin-right: 30px;\n  ${props => (props.currentTrickWinner === props.myId) ? css`animation: ${flash} 1s linear infinite` : ''};\n`;\n\nconst PlayerSignal = styled.div`\n  z-index: 0;\n  position: absolute;\n  display: ${props => props.myId === props.clientTurn ? 'flex' : 'none'};\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  color: rgba(255, 255, 255, .1);\n  font-size: 20rem;\n`;\n\n\nexport default connect(mapStateToProps)(PlayerInfo);","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Game from './components/Game';\r\nimport ConnectedClients from './components/ConnectedClients';\r\nimport DisplayTrump from \"./components/DisplayTrump\";\r\nimport ButtonsContainer from './components/ButtonsContainer';\r\nimport RegularButton from './components/RegularButton';\r\nimport PlayerInfo from \"./components/PlayerInfo\";\r\n\r\nimport TractorSvg from './tractor_logo.svg'\r\n\r\nimport {\r\n  connectToSocketIO,\r\n  getConnectedClientsIO,\r\n} from './socket/connect';\r\n\r\nimport {\r\n  getName,\r\n  getScreenSize,\r\n  updateState\r\n} from './redux/selectors';\r\n\r\nimport {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n} from './redux/actions';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      connectionStatus: false,\r\n      isConnecting: false,\r\n      iconWidth: 150,\r\n      inputWidth: 100\r\n    };\r\n\r\n    window.addEventListener('resize', this.setAppSizes.bind(this));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setAppSizes();\r\n  }\r\n\r\n  setAppSizes() {\r\n    let screenWidth = window.innerWidth;\r\n    let screenHeight = window.innerHeight;\r\n    let appWidth, appHeight, iconWidth, inputWidth;\r\n\r\n    if (screenWidth >= 2560 && screenHeight >= 1440) {\r\n      appWidth = 2560;\r\n      appHeight = 1440;\r\n      iconWidth = 250;\r\n      inputWidth = 200;\r\n    } else if (screenWidth >= 1920 && screenHeight >= 1080) {\r\n      appWidth = 1920;\r\n      appHeight = 1080;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    } else {\r\n      appWidth = 1280;\r\n      appHeight = 720;\r\n      iconWidth = 150;\r\n      inputWidth = 130;\r\n    }\r\n\r\n    this.props.setScreenSize(appWidth, appHeight);\r\n    this.setState({\r\n      iconWidth,\r\n      inputWidth\r\n    })\r\n  }\r\n\r\n  setConnectionStatus(connectionStatus, id, name, roomName) {\r\n    this.setState({ connectionStatus });\r\n    if (connectionStatus) {\r\n      getConnectedClientsIO(this.setConnectedClients.bind(this));\r\n      this.props.setUser(name, id, roomName);\r\n    }\r\n  }\r\n\r\n  setConnectedClients(sockets) {\r\n    this.props.updateClientList(sockets);\r\n  }\r\n\r\n  joinRoomValidator(isConnected) {\r\n    if(!isConnected) {\r\n      alert('Room is full.');\r\n      this.setState({\r\n        connectionStatus: false\r\n      });\r\n    }\r\n    this.setState({\r\n      isConnecting: false\r\n    });\r\n  }\r\n\r\n  connect(ev) {\r\n    ev.preventDefault();\r\n    let name = this.nameRef.value;\r\n    let room = this.roomRef.value;\r\n    if (!name) {\r\n      alert('enter a name');\r\n      return;\r\n    }\r\n    if (!room) {\r\n      alert('enter a room');\r\n      return;\r\n    }\r\n\r\n    if (name.length > 7) {\r\n      name = name.slice(0, 7);\r\n    }\r\n\r\n    this.setState({\r\n      isConnecting: true\r\n    });\r\n\r\n    connectToSocketIO(this.setConnectionStatus.bind(this), this.joinRoomValidator.bind(this), name, room);\r\n  }\r\n\r\n  renderPreConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    const {\r\n      iconWidth,\r\n      inputWidth,\r\n      isConnecting\r\n    } = this.state;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <Title>\r\n          {/* Tractor */}\r\n          <Logo\r\n            iconWidth={iconWidth}\r\n            src={TractorSvg}\r\n            draggable={false}\r\n          />\r\n        </Title>\r\n        <Form\r\n          onSubmit={(ev) => { this.connect(ev) }}\r\n        >\r\n          <Input\r\n            autoFocus\r\n            placeholder=\"Enter a name!\"\r\n            inputWidth={inputWidth}\r\n            ref={(nameRef) => { this.nameRef = nameRef }}\r\n          />\r\n          <Input\r\n            placeholder=\"Enter a room code!\"\r\n            inputWidth={inputWidth}\r\n            ref={(roomRef) => { this.roomRef = roomRef }}\r\n          />\r\n          <RegularButton\r\n            label=\"Join\"\r\n            disabled={isConnecting}\r\n          />\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\n  renderPostConnection() {\r\n    const {\r\n      appHeight,\r\n      appWidth\r\n    } = this.props;\r\n    return (\r\n      <Container\r\n        width={appWidth}\r\n        height={appHeight}\r\n      >\r\n        <PlayerInfo />\r\n        <DisplayTrump />\r\n        <ConnectedClients />\r\n        <ButtonsContainer />\r\n        <Game />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { connectionStatus } = this.state;\r\n    return connectionStatus ? this.renderPostConnection() : this.renderPreConnection();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const name = getName(state);\r\n  const numStateChanges = updateState(state);\r\n  const { appWidth, appHeight } = getScreenSize(state);\r\n  return {\r\n    name,\r\n    appWidth,\r\n    appHeight,\r\n    numStateChanges,\r\n  };\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${props => `${props.width}px`};\r\n  height: ${props => `${props.height}px`};\r\n  background-color: green;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 5px;\r\n  padding: 0;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  margin: 5px 15px;\r\n  padding: 7px 10px;\r\n  outline: none;\r\n  border: transparent 2px solid;\r\n  border-radius: 2px 2px 0 0;\r\n  width: ${prop => `${prop.inputWidth}px`};\r\n  height: 15px;\r\n  background-color: darkgreen;\r\n  color: rgba(255, 255, 255, .9);\r\n  transition: all .3s cubic-bezier(0.65, 0, 0.35, 1);\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, .7);\r\n  }\r\n\r\n  &:focus, &:active {\r\n    border-bottom: rgba(255, 255, 255, .7) 2px solid;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: ${prop => `${prop.iconWidth}px`};\r\n`;\r\n\r\nexport default connect(mapStateToProps, {\r\n  updateClientList,\r\n  setScreenSize,\r\n  setUser\r\n})(App);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const currState = {\n  appWidth: 1920,\n  appHeight: 1080,\n  socket: { connected: false },\n  clients: {},\n  clientIds: [],\n  name: '',\n  id: '',\n  cards: [],\n  trump: '2',\n  room: '',\n  currentBid: null,\n  currentTrickWinner: null,\n  currentBottomClient: null,\n  currentClientTurn: null,\n  existingTricks: {},\n  trumpTracker: { 'S': 0, 'D': 0, 'C': 0, 'H': 0, 'SJ': 0, 'BJ': 0 },\n  validBids: [],\n  points: 0,\n  // canSelectCards & numCardsSelected is for\n  // both returning bottom and playing cards on your turn\n  canSelectCards: false,\n  numCardsSelected: 0,\n  // canBidForBottom is only true beginning of each round\n  canBidForBottom: false,\n  // TODO: add everyone elses play - should be by socketId index\n  // [[cards by player0], [cards by player1]]\n  cardsPlayed: [],\n  numStateUpdated: 0\n}\n\nexport default (state = currState, action) => {\n  switch (action.type) {\n    case 'SET_SCREEN_SIZE':\n      return Object.assign({}, state, {\n        appWidth: action.payload.width,\n        appHeight: action.payload.height\n      })\n    case 'UPDATE_CLIENT_LIST':\n      return Object.assign({}, state, {\n        clients: action.payload.clients,\n        clientIds: action.payload.clientIds,\n        numStateUpdated: state.numStateUpdated + 1\n      })\n    case 'SET_USER':\n      console.log(action.payload)\n      return Object.assign({}, state, {\n        name: action.payload.name,\n        room: action.payload.room,\n        id: action.payload.id\n      })\n    case 'SET_DECLARER':\n      console.log(action.payload);\n      return Object.assign({}, state, {\n        currentBottomClient: state.clients[action.payload]\n      })\n    case 'UPDATE_MY_HAND':\n      return Object.assign({}, state, {\n        cards: action.payload.cards,\n        trumpTracker: action.payload.trumpTracker,\n        numStateUpdated: state.numStateUpdated + 1\n      })\n    case 'SET_VALID_BIDS':\n      return Object.assign({}, state, {\n        validBids: action.payload,\n        numStateUpdated: state.numStateUpdated + 1\n      })\n    case 'SET_TRUMP_VALUE':\n      return Object.assign({}, state, {\n        trump: action.payload\n      })\n    case 'SET_CURRENT_BID':\n      return Object.assign({}, state, {\n        currentBid: action.payload.bid,\n        currentBottomClient: action.payload.socketId,\n        numStateUpdated: state.numStateUpdated + 1\n      })\n    case 'CAN_SELECT_CARDS':\n      return Object.assign({}, state, {\n        canSelectCards: action.payload\n      })\n    case 'UPDATE_NUM_CARDS_SELECTED':\n      return Object.assign({}, state, {\n        numCardsSelected: action.payload\n      })\n    case 'TOGGLE_BID_BUTTONS':\n      return Object.assign({}, state, {\n        canBidForBottom: action.payload\n      })\n    case 'SET_CLIENT_TURN':\n      return Object.assign({}, state, {\n        currentClientTurn: action.payload\n      })\n    case 'SET_ALL_TRICKS':\n      return Object.assign({}, state, {\n        existingTricks: action.payload,\n        numStateUpdated: state.numStateUpdated + 1\n      })\n    case 'SET_POINTS':\n      return Object.assign({}, state, {\n        points: action.payload,\n      })\n    case 'SET_CURRENT_TRICK_WINNER':\n      return Object.assign({}, state, {\n        currentTrickWinner: action.payload\n      })\n    default:\n      return state;\n  }\n}","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n      <App />\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}